{
    "id": "vscode://schemas/launch",
    "type": "object",
    "title": "起動",
    "allowTrailingCommas": true,
    "allowComments": true,
    "required": [],
    "default": {
        "version": "0.2.0",
        "configurations": [],
        "compounds": []
    },
    "properties": {
        "version": {
            "type": "string",
            "description": "このファイル形式のバージョン。",
            "default": "0.2.0"
        },
        "configurations": {
            "type": "array",
            "description": "構成の一覧。IntelliSense を使用して、新しい構成を追加したり、既存の構成を編集したります。",
            "items": {
                "defaultSnippets": [
                    {
                        "body": {
                            "name": "${1:Attach}",
                            "port": 9229,
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "実行中のノード プログラムにアタッチします",
                        "label": "Node.js: アタッチ"
                    },
                    {
                        "body": {
                            "address": "${2:TCP/IP address of process to be debugged}",
                            "localRoot": "^\"\\${workspaceFolder}\"",
                            "name": "${1:Attach to Remote}",
                            "port": 9229,
                            "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "リモート ノード プログラムのデバッグ ポートにアタッチします",
                        "label": "Node.js: リモート プログラムにアタッチする"
                    },
                    {
                        "body": {
                            "name": "${1:Attach by Process ID}",
                            "processId": "^\"\\${command:PickProcess}\"",
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "プロセス ピッカーを開いて、アタッチ先の node プロセスを選択します",
                        "label": "Node.js: プロセスへのアタッチ"
                    },
                    {
                        "body": {
                            "name": "${2:Launch Program}",
                            "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "ノード プログラムをデバッグ モードで起動します",
                        "label": "Node.js: プログラムの起動"
                    },
                    {
                        "body": {
                            "name": "${1:Launch via NPM}",
                            "request": "launch",
                            "runtimeArgs": [
                                "run-script",
                                "debug"
                            ],
                            "runtimeExecutable": "npm",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "label": "Node.js: npm による起動",
                        "markdownDescription": "npm の `debug` スクリプトにより Node プログラムを起動します"
                    },
                    {
                        "body": {
                            "console": "integratedTerminal",
                            "internalConsoleOptions": "neverOpen",
                            "name": "nodemon",
                            "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                            "request": "launch",
                            "restart": true,
                            "runtimeExecutable": "nodemon",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "nodemon を使用してソース変更時にデバッグ セッションを再起動します",
                        "label": "Node.js: nodemon のセットアップ"
                    },
                    {
                        "body": {
                            "args": [
                                "-u",
                                "tdd",
                                "--timeout",
                                "999999",
                                "--colors",
                                "^\"\\${workspaceFolder}/${1:test}\""
                            ],
                            "internalConsoleOptions": "openOnSessionStart",
                            "name": "Mocha Tests",
                            "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Mocha テストをデバッグします",
                        "label": "Node.js: Mocha テスト"
                    },
                    {
                        "body": {
                            "args": [
                                "${1:generator}"
                            ],
                            "console": "integratedTerminal",
                            "internalConsoleOptions": "neverOpen",
                            "name": "Yeoman ${1:generator}",
                            "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "label": "Node.js: Yeoman ジェネレーター",
                        "markdownDescription": "yeoman ジェネレーターをデバッグします (プロジェクト フォルダーで `npm link` を実行してインストールします)"
                    },
                    {
                        "body": {
                            "args": [
                                "${1:task}"
                            ],
                            "name": "Gulp ${1:task}",
                            "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "gulp タスクをデバッグします (プロジェクトにローカルの gulp がインストールされていることを確認します)",
                        "label": "Node.js: Gulp タスク"
                    },
                    {
                        "body": {
                            "name": "Electron Main",
                            "program": "^\"\\${workspaceFolder}/main.js\"",
                            "request": "launch",
                            "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Electron のメイン プロセスをデバッグします",
                        "label": "Node.js: Electron (メイン)"
                    },
                    {
                        "body": {
                            "command": "npm start",
                            "name": "Run npm start",
                            "request": "launch",
                            "type": "node-terminal"
                        },
                        "description": "デバッグ ターミナルで \"npm start\" を実行する",
                        "label": "デバッグ ターミナルで \"npm start\" を実行する"
                    },
                    {
                        "body": {
                            "args": [
                                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
                            ],
                            "name": "拡張機能の起動",
                            "outFiles": [
                                "^\"\\${workspaceFolder}/out/**/*.js\""
                            ],
                            "preLaunchTask": "npm",
                            "request": "launch",
                            "type": "extensionHost"
                        },
                        "description": "デバッグ モードで VS Code 拡張機能を起動します",
                        "label": "VS Code 拡張機能の開発"
                    },
                    {
                        "body": {
                            "name": "Launch Chrome",
                            "request": "launch",
                            "type": "chrome",
                            "url": "http://localhost:8080",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Chrome を起動して URL をデバッグする",
                        "label": "Chrome: 起動"
                    },
                    {
                        "body": {
                            "name": "Attach to Chrome",
                            "port": 9222,
                            "request": "attach",
                            "type": "chrome",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "既にデバッグ モードになっている Chrome のインスタンスにアタッチする",
                        "label": "Chrome: アタッチ"
                    },
                    {
                        "body": {
                            "name": "Launch Edge",
                            "request": "launch",
                            "type": "msedge",
                            "url": "http://localhost:8080",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Microsoft Edge を起動して URL をデバッグする",
                        "label": "Microsoft Edge: 起動"
                    },
                    {
                        "body": {
                            "name": "Attach to Edge",
                            "port": 9222,
                            "request": "attach",
                            "type": "msedge",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Microsoft Edge のインスタンスへのアタッチは既にデバッグ モードです",
                        "label": "Microsoft Edge: アタッチ"
                    }
                ],
                "type": "object",
                "oneOf": [
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachExistingChildren": {
                                "default": false,
                                "description": "生成済みの子プロセスにアタッチを試行するかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "continueOnAttach": {
                                "default": true,
                                "markdownDescription": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "processId": {
                                "default": "${command:PickProcess}",
                                "description": "アタッチするプロセスの ID。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "websocketAddress": {
                                "description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type node instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [],
                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachSimplePort": {
                                "default": 9229,
                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                "type": "integer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "console": {
                                "default": "internalConsole",
                                "description": "デバッグ ターゲットの起動場所です。",
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "enumDescriptions": [
                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                    "VS Code の統合ターミナルです",
                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "killBehavior": {
                                "default": "forceful",
                                "enum": [
                                    "forceful",
                                    "polite",
                                    "none"
                                ],
                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "program": {
                                "default": "",
                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "stopOnEntry": {
                                "default": true,
                                "description": "起動後、プログラムを自動的に停止します。",
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type node instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachExistingChildren": {
                                "default": false,
                                "description": "生成済みの子プロセスにアタッチを試行するかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "continueOnAttach": {
                                "default": true,
                                "markdownDescription": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "processId": {
                                "default": "${command:PickProcess}",
                                "description": "アタッチするプロセスの ID。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "websocketAddress": {
                                "description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [],
                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachSimplePort": {
                                "default": 9229,
                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                "type": "integer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "console": {
                                "default": "internalConsole",
                                "description": "デバッグ ターゲットの起動場所です。",
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "enumDescriptions": [
                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                    "VS Code の統合ターミナルです",
                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "killBehavior": {
                                "default": "forceful",
                                "enum": [
                                    "forceful",
                                    "polite",
                                    "none"
                                ],
                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "program": {
                                "default": "",
                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "stopOnEntry": {
                                "default": true,
                                "description": "起動後、プログラムを自動的に停止します。",
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "command": {
                                "default": "npm start",
                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node-terminal"
                                ],
                                "enumDescriptions": [
                                    "JavaScript デバッグ ターミナル"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [
                                    "--extensionDevelopmentPath=${workspaceFolder}"
                                ],
                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebWorkerHost": {
                                "default": true,
                                "markdownDescription": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebviews": {
                                "default": true,
                                "markdownDescription": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "rendererDebugOptions": {
                                "default": {
                                    "webRoot": "${workspaceFolder}"
                                },
                                "markdownDescription": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
                                "properties": {
                                    "address": {
                                        "default": "localhost",
                                        "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                        "type": "string"
                                    },
                                    "browserAttachLocation": {
                                        "default": null,
                                        "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "enum": [
                                                    "ui",
                                                    "workspace"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "cascadeTerminateToConfigurations": {
                                        "default": [],
                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                        "items": {
                                            "type": "string",
                                            "uniqueItems": true
                                        },
                                        "type": "array"
                                    },
                                    "customDescriptionGenerator": {
                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                        "type": "string"
                                    },
                                    "customPropertiesGenerator": {
                                        "deprecated": true,
                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                        "type": "string"
                                    },
                                    "disableNetworkCache": {
                                        "default": true,
                                        "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                        "type": "boolean"
                                    },
                                    "enableContentValidation": {
                                        "default": true,
                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                        "type": "boolean"
                                    },
                                    "inspectUri": {
                                        "default": null,
                                        "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "outFiles": {
                                        "default": [
                                            "${workspaceFolder}/**/*.js",
                                            "!**/node_modules/**"
                                        ],
                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array"
                                        ]
                                    },
                                    "outputCapture": {
                                        "default": "console",
                                        "enum": [
                                            "console",
                                            "std"
                                        ],
                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                    },
                                    "pathMapping": {
                                        "default": {},
                                        "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                        "type": "object"
                                    },
                                    "pauseForSourceMap": {
                                        "default": false,
                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                        "type": "boolean"
                                    },
                                    "perScriptSourcemaps": {
                                        "default": "auto",
                                        "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                        "enum": [
                                            "yes",
                                            "no",
                                            "auto"
                                        ],
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 9229,
                                        "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                        "type": "number"
                                    },
                                    "resolveSourceMapLocations": {
                                        "default": null,
                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array",
                                            "null"
                                        ]
                                    },
                                    "restart": {
                                        "default": false,
                                        "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                        "type": "boolean"
                                    },
                                    "server": {
                                        "oneOf": [
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "node my-server.js"
                                                },
                                                "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                                "properties": {
                                                    "args": {
                                                        "default": [],
                                                        "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "string"
                                                        ]
                                                    },
                                                    "attachSimplePort": {
                                                        "default": 9229,
                                                        "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                        "type": "integer"
                                                    },
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "console": {
                                                        "default": "internalConsole",
                                                        "description": "デバッグ ターゲットの起動場所です。",
                                                        "enum": [
                                                            "internalConsole",
                                                            "integratedTerminal",
                                                            "externalTerminal"
                                                        ],
                                                        "enumDescriptions": [
                                                            "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                            "VS Code の統合ターミナルです",
                                                            "ユーザー設定を介して構成できる外部ターミナルです"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "enableTurboSourcemaps": {
                                                        "default": true,
                                                        "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                        "type": "string"
                                                    },
                                                    "killBehavior": {
                                                        "default": "forceful",
                                                        "enum": [
                                                            "forceful",
                                                            "polite",
                                                            "none"
                                                        ],
                                                        "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "profileStartup": {
                                                        "default": true,
                                                        "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                        "type": "boolean"
                                                    },
                                                    "program": {
                                                        "default": "",
                                                        "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                        "type": "string"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "restart": {
                                                        "default": true,
                                                        "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "delay": {
                                                                        "default": 1000,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    },
                                                                    "maxAttempts": {
                                                                        "default": 10,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "runtimeArgs": {
                                                        "default": [],
                                                        "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "runtimeExecutable": {
                                                        "default": "node",
                                                        "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "runtimeVersion": {
                                                        "default": "default",
                                                        "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                        "type": "string"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                        "type": "boolean"
                                                    },
                                                    "stopOnEntry": {
                                                        "default": true,
                                                        "description": "起動後、プログラムを自動的に停止します。",
                                                        "type": [
                                                            "boolean",
                                                            "string"
                                                        ]
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "生成される診断出力を構成します。",
                                                        "oneOf": [
                                                            {
                                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "npm start"
                                                },
                                                "description": "JavaScript デバッグ ターミナル",
                                                "properties": {
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "command": {
                                                        "default": "npm start",
                                                        "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                        "docDefault": "localRoot || ${workspaceFolder}",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "enableTurboSourcemaps": {
                                                        "default": true,
                                                        "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                        "type": "boolean"
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "生成される診断出力を構成します。",
                                                        "oneOf": [
                                                            {
                                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "showAsyncStacks": {
                                        "default": true,
                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                        "oneOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "properties": {
                                                    "onAttach": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onAttach"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "properties": {
                                                    "onceBreakpointResolved": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onceBreakpointResolved"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "skipFiles": {
                                        "default": [
                                            "<node_internals>/**"
                                        ],
                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                        "type": "array"
                                    },
                                    "smartStep": {
                                        "default": true,
                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                        "type": "boolean"
                                    },
                                    "sourceMapPathOverrides": {
                                        "default": {
                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                        },
                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                        "type": "object"
                                    },
                                    "sourceMapRenames": {
                                        "default": true,
                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                        "type": "boolean"
                                    },
                                    "sourceMaps": {
                                        "default": true,
                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                        "type": "boolean"
                                    },
                                    "targetSelection": {
                                        "default": "automatic",
                                        "enum": [
                                            "pick",
                                            "automatic"
                                        ],
                                        "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                        "type": "string"
                                    },
                                    "timeout": {
                                        "default": 10000,
                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                        "type": "number"
                                    },
                                    "timeouts": {
                                        "additionalProperties": false,
                                        "default": {},
                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                        "properties": {
                                            "hoverEvaluation": {
                                                "default": 500,
                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                "type": "number"
                                            },
                                            "sourceMapCumulativePause": {
                                                "default": 1000,
                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                "type": "number"
                                            },
                                            "sourceMapMinPause": {
                                                "default": 1000,
                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "trace": {
                                        "default": true,
                                        "description": "生成される診断出力を構成します。",
                                        "oneOf": [
                                            {
                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                "type": "boolean"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "logFile": {
                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "stdio": {
                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "url": {
                                        "default": "http://localhost:8080",
                                        "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                        "type": "string"
                                    },
                                    "urlFilter": {
                                        "default": "",
                                        "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                        "type": "string"
                                    },
                                    "vueComponentPaths": {
                                        "default": [
                                            "${workspaceFolder}/**/*.vue"
                                        ],
                                        "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                        "type": "array"
                                    },
                                    "webRoot": {
                                        "default": "${workspaceFolder}",
                                        "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "VS Code への絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-extensionHost"
                                ],
                                "enumDescriptions": [
                                    "VS Code 拡張機能の開発"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type extensionHost instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request",
                            "args"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [
                                    "--extensionDevelopmentPath=${workspaceFolder}"
                                ],
                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebWorkerHost": {
                                "default": true,
                                "markdownDescription": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebviews": {
                                "default": true,
                                "markdownDescription": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableTurboSourcemaps": {
                                "default": true,
                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "rendererDebugOptions": {
                                "default": {
                                    "webRoot": "${workspaceFolder}"
                                },
                                "markdownDescription": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
                                "properties": {
                                    "address": {
                                        "default": "localhost",
                                        "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                        "type": "string"
                                    },
                                    "browserAttachLocation": {
                                        "default": null,
                                        "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "enum": [
                                                    "ui",
                                                    "workspace"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "cascadeTerminateToConfigurations": {
                                        "default": [],
                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                        "items": {
                                            "type": "string",
                                            "uniqueItems": true
                                        },
                                        "type": "array"
                                    },
                                    "customDescriptionGenerator": {
                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                        "type": "string"
                                    },
                                    "customPropertiesGenerator": {
                                        "deprecated": true,
                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                        "type": "string"
                                    },
                                    "disableNetworkCache": {
                                        "default": true,
                                        "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                        "type": "boolean"
                                    },
                                    "enableContentValidation": {
                                        "default": true,
                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                        "type": "boolean"
                                    },
                                    "inspectUri": {
                                        "default": null,
                                        "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "outFiles": {
                                        "default": [
                                            "${workspaceFolder}/**/*.js",
                                            "!**/node_modules/**"
                                        ],
                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array"
                                        ]
                                    },
                                    "outputCapture": {
                                        "default": "console",
                                        "enum": [
                                            "console",
                                            "std"
                                        ],
                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                    },
                                    "pathMapping": {
                                        "default": {},
                                        "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                        "type": "object"
                                    },
                                    "pauseForSourceMap": {
                                        "default": false,
                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                        "type": "boolean"
                                    },
                                    "perScriptSourcemaps": {
                                        "default": "auto",
                                        "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                        "enum": [
                                            "yes",
                                            "no",
                                            "auto"
                                        ],
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 9229,
                                        "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                        "type": "number"
                                    },
                                    "resolveSourceMapLocations": {
                                        "default": null,
                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array",
                                            "null"
                                        ]
                                    },
                                    "restart": {
                                        "default": false,
                                        "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                        "type": "boolean"
                                    },
                                    "server": {
                                        "oneOf": [
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "node my-server.js"
                                                },
                                                "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                                "properties": {
                                                    "args": {
                                                        "default": [],
                                                        "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "string"
                                                        ]
                                                    },
                                                    "attachSimplePort": {
                                                        "default": 9229,
                                                        "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                        "type": "integer"
                                                    },
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "console": {
                                                        "default": "internalConsole",
                                                        "description": "デバッグ ターゲットの起動場所です。",
                                                        "enum": [
                                                            "internalConsole",
                                                            "integratedTerminal",
                                                            "externalTerminal"
                                                        ],
                                                        "enumDescriptions": [
                                                            "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                            "VS Code の統合ターミナルです",
                                                            "ユーザー設定を介して構成できる外部ターミナルです"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "enableTurboSourcemaps": {
                                                        "default": true,
                                                        "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                        "type": "string"
                                                    },
                                                    "killBehavior": {
                                                        "default": "forceful",
                                                        "enum": [
                                                            "forceful",
                                                            "polite",
                                                            "none"
                                                        ],
                                                        "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "profileStartup": {
                                                        "default": true,
                                                        "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                        "type": "boolean"
                                                    },
                                                    "program": {
                                                        "default": "",
                                                        "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                        "type": "string"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "restart": {
                                                        "default": true,
                                                        "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "delay": {
                                                                        "default": 1000,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    },
                                                                    "maxAttempts": {
                                                                        "default": 10,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "runtimeArgs": {
                                                        "default": [],
                                                        "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "runtimeExecutable": {
                                                        "default": "node",
                                                        "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "runtimeVersion": {
                                                        "default": "default",
                                                        "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                        "type": "string"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                        "type": "boolean"
                                                    },
                                                    "stopOnEntry": {
                                                        "default": true,
                                                        "description": "起動後、プログラムを自動的に停止します。",
                                                        "type": [
                                                            "boolean",
                                                            "string"
                                                        ]
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "生成される診断出力を構成します。",
                                                        "oneOf": [
                                                            {
                                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "npm start"
                                                },
                                                "description": "JavaScript デバッグ ターミナル",
                                                "properties": {
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "command": {
                                                        "default": "npm start",
                                                        "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                        "docDefault": "localRoot || ${workspaceFolder}",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "enableTurboSourcemaps": {
                                                        "default": true,
                                                        "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                        "type": "boolean"
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "生成される診断出力を構成します。",
                                                        "oneOf": [
                                                            {
                                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "showAsyncStacks": {
                                        "default": true,
                                        "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                        "oneOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "properties": {
                                                    "onAttach": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onAttach"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "properties": {
                                                    "onceBreakpointResolved": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onceBreakpointResolved"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "skipFiles": {
                                        "default": [
                                            "<node_internals>/**"
                                        ],
                                        "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                        "type": "array"
                                    },
                                    "smartStep": {
                                        "default": true,
                                        "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                        "type": "boolean"
                                    },
                                    "sourceMapPathOverrides": {
                                        "default": {
                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                        },
                                        "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                        "type": "object"
                                    },
                                    "sourceMapRenames": {
                                        "default": true,
                                        "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                        "type": "boolean"
                                    },
                                    "sourceMaps": {
                                        "default": true,
                                        "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                        "type": "boolean"
                                    },
                                    "targetSelection": {
                                        "default": "automatic",
                                        "enum": [
                                            "pick",
                                            "automatic"
                                        ],
                                        "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                        "type": "string"
                                    },
                                    "timeout": {
                                        "default": 10000,
                                        "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                        "type": "number"
                                    },
                                    "timeouts": {
                                        "additionalProperties": false,
                                        "default": {},
                                        "description": "いくつかのデバッガー操作のタイムアウト。",
                                        "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                        "properties": {
                                            "hoverEvaluation": {
                                                "default": 500,
                                                "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                "type": "number"
                                            },
                                            "sourceMapCumulativePause": {
                                                "default": 1000,
                                                "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                "type": "number"
                                            },
                                            "sourceMapMinPause": {
                                                "default": 1000,
                                                "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "trace": {
                                        "default": true,
                                        "description": "生成される診断出力を構成します。",
                                        "oneOf": [
                                            {
                                                "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                "type": "boolean"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "logFile": {
                                                        "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "stdio": {
                                                        "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "url": {
                                        "default": "http://localhost:8080",
                                        "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                        "type": "string"
                                    },
                                    "urlFilter": {
                                        "default": "",
                                        "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                        "type": "string"
                                    },
                                    "vueComponentPaths": {
                                        "default": [
                                            "${workspaceFolder}/**/*.vue"
                                        ],
                                        "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                        "type": "array"
                                    },
                                    "webRoot": {
                                        "default": "${workspaceFolder}",
                                        "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "VS Code への絶対パス。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "extensionHost"
                                ],
                                "enumDescriptions": [
                                    "VS Code 拡張機能の開発"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request",
                            "args"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-chrome"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type chrome instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "ブラウザーで開くローカル HTML ファイル",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeLaunchArgs": {
                                "default": true,
                                "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 0,
                                "description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-chrome"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type chrome instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "chrome"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "ブラウザーで開くローカル HTML ファイル",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeLaunchArgs": {
                                "default": true,
                                "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 0,
                                "description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "chrome"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": {
                                    "pipeName": "MyPipeName"
                                },
                                "description": "UWP でホストされている Webview2 向けデバッグ パイプの 'pipeName' を含むオブジェクト。これはパイプ \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\" 作成時の \"MyTestSharedMemory\" です",
                                "properties": {
                                    "pipeName": {
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-msedge"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type msedge instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "ブラウザーで開くローカル HTML ファイル",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeLaunchArgs": {
                                "default": true,
                                "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": false,
                                "description": "'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-msedge"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type msedge instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": {
                                    "pipeName": "MyPipeName"
                                },
                                "description": "UWP でホストされている Webview2 向けデバッグ パイプの 'pipeName' を含むオブジェクト。これはパイプ \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\" 作成時の \"MyTestSharedMemory\" です",
                                "properties": {
                                    "pipeName": {
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "msedge"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "ブラウザーで開くローカル HTML ファイル",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeLaunchArgs": {
                                "default": true,
                                "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "デバッグ ターゲットの起動場所です。",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                    "VS Code の統合ターミナルです",
                                                    "ユーザー設定を介して構成できる外部ターミナルです"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "起動後、プログラムを自動的に停止します。",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript デバッグ ターミナル",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "enableTurboSourcemaps": {
                                                "default": true,
                                                "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "生成される診断出力を構成します。",
                                                "oneOf": [
                                                    {
                                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "いくつかのデバッガー操作のタイムアウト。",
                                "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "生成される診断出力を構成します。",
                                "oneOf": [
                                    {
                                        "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": false,
                                "description": "'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}",
                                            "killOnServerStop": false
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>",
                                            "killOnServerStop": false
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            },
                                            "killOnServerStop": {
                                                "type": "boolean",
                                                "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                                "default": false
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "msedge"
                                ],
                                "enumDescriptions": [
                                    "Web アプリ (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    }
                ]
            }
        },
        "compounds": {
            "type": "array",
            "description": "複合の一覧。各複合は、同時に起動される複数の構成を参照します。",
            "items": {
                "type": "object",
                "required": [
                    "name",
                    "configurations"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "複合の名前。起動構成のドロップダウン メニューに表示されます。"
                    },
                    "presentation": {
                        "type": "object",
                        "description": "デバッグ構成ドロップダウンとコマンド パレットでこの構成を表示する方法に関するプレゼンテーション オプション。",
                        "properties": {
                            "hidden": {
                                "type": "boolean",
                                "default": false,
                                "description": "この構成を構成ドロップダウンとコマンド パレットに表示するかどうかを制御します。"
                            },
                            "group": {
                                "type": "string",
                                "default": "",
                                "description": "この構成が属するグループ。構成ドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                            },
                            "order": {
                                "type": "number",
                                "default": 1,
                                "description": "グループ内でのこの構成の順序。[構成] のドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                            }
                        },
                        "default": {
                            "hidden": false,
                            "group": "",
                            "order": 1
                        }
                    },
                    "configurations": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "oneOf": [
                                {
                                    "enum": [],
                                    "description": "一意の構成名を使用してください。"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "name"
                                    ],
                                    "properties": {
                                        "name": {
                                            "enum": [],
                                            "description": "複合の名前。起動構成のドロップダウン メニューに表示されます。"
                                        },
                                        "folder": {
                                            "enum": [
                                                "vscode-schemas"
                                            ],
                                            "description": "複合があるフォルダーの名前。"
                                        }
                                    }
                                }
                            ]
                        },
                        "description": "この複合の一部として開始される構成の名前。"
                    },
                    "stopAll": {
                        "type": "boolean",
                        "default": false,
                        "description": "1 つのセッションを手動で終了させたときに、すべての複合セッションを停止するかどうかを制御します。"
                    },
                    "preLaunchTask": {
                        "type": "string",
                        "default": "",
                        "description": "複合構成の開始前に実行するタスク。"
                    }
                },
                "default": {
                    "name": "Compound",
                    "configurations": []
                }
            },
            "default": [
                {
                    "name": "Compound",
                    "configurations": []
                }
            ]
        },
        "inputs": {
            "type": "array",
            "description": "ユーザー入力。自由な文字列の入力またはいくつかのオプションからの選択など、ユーザー入力のプロンプトを定義するために使用します。",
            "items": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "description"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "promptString"
                                ],
                                "enumDescriptions": [
                                    "'PromptString' 型はユーザーに入力を求める入力ボックスを開きます。"
                                ]
                            },
                            "description": {
                                "type": "string",
                                "description": "ユーザーが入力を求められるときに説明が表示されます。"
                            },
                            "default": {
                                "type": "string",
                                "description": "入力の既定値。"
                            },
                            "password": {
                                "type": "boolean",
                                "description": "パスワード入力を表示するかどうかを制御します。パスワード入力では、入力したテキストが非表示になります。"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "description",
                            "options"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "pickString"
                                ],
                                "enumDescriptions": [
                                    "'PickString' 型は選択一覧を表示します。"
                                ]
                            },
                            "description": {
                                "type": "string",
                                "description": "ユーザーが入力を求められるときに説明が表示されます。"
                            },
                            "default": {
                                "type": "string",
                                "description": "入力の既定値。"
                            },
                            "options": {
                                "type": "array",
                                "description": "クイック ピックのオプションを定義する文字列の配列です。",
                                "items": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object",
                                            "required": [
                                                "value"
                                            ],
                                            "additionalProperties": false,
                                            "properties": {
                                                "label": {
                                                    "type": "string",
                                                    "description": "オプションのラベル。"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "オプションの値。"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "command"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "command"
                                ],
                                "enumDescriptions": [
                                    "'command' 型はコマンドを実行します。"
                                ]
                            },
                            "command": {
                                "type": "string",
                                "description": "この入力変数のために実行するコマンド。"
                            },
                            "args": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    },
                                    {
                                        "type": "array",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    },
                                    {
                                        "type": "string",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
            "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
        }
    },
    "definitions": {
        "common": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "構成の名前。起動構成ドロップダウン メニューに表示されます。",
                    "default": "Launch"
                },
                "debugServer": {
                    "type": "number",
                    "description": "デバッグ拡張機能の開発のみ。ポートが指定の VS Code の場合、サーバー モードで実行中のデバッグ アダプターへの接続が試行されます。",
                    "default": 4711
                },
                "preLaunchTask": {
                    "anyOf": [
                        {
                            "oneOf": []
                        },
                        {
                            "type": [
                                "string"
                            ]
                        }
                    ],
                    "default": "",
                    "defaultSnippets": [
                        {
                            "body": {
                                "task": "",
                                "type": ""
                            }
                        }
                    ],
                    "description": "デバッグ セッションの開始前に実行するタスク。"
                },
                "postDebugTask": {
                    "anyOf": [
                        {
                            "oneOf": []
                        },
                        {
                            "type": [
                                "string"
                            ]
                        }
                    ],
                    "default": "",
                    "defaultSnippets": [
                        {
                            "body": {
                                "task": "",
                                "type": ""
                            }
                        }
                    ],
                    "description": "デバッグ セッションの終了前に実行するタスク。"
                },
                "presentation": {
                    "type": "object",
                    "description": "デバッグ構成ドロップダウンとコマンド パレットでこの構成を表示する方法に関するプレゼンテーション オプション。",
                    "properties": {
                        "hidden": {
                            "type": "boolean",
                            "default": false,
                            "description": "この構成を構成ドロップダウンとコマンド パレットに表示するかどうかを制御します。"
                        },
                        "group": {
                            "type": "string",
                            "default": "",
                            "description": "この構成が属するグループ。構成ドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                        },
                        "order": {
                            "type": "number",
                            "default": 1,
                            "description": "グループ内でのこの構成の順序。[構成] のドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                        }
                    },
                    "default": {
                        "hidden": false,
                        "group": "",
                        "order": 1
                    }
                },
                "internalConsoleOptions": {
                    "enum": [
                        "neverOpen",
                        "openOnSessionStart",
                        "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "いつ内部デバッグ コンソールを開くかを制御します。",
                    "defaultDefaultValue": "openOnFirstSessionStart",
                    "scope": 3,
                    "restricted": false
                },
                "suppressMultipleSessionWarning": {
                    "type": "boolean",
                    "description": "同じデバッグ構成を複数回起動しようとしたときの警告を無効にしました。",
                    "default": true
                }
            }
        },
        "pwa-node:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachExistingChildren": {
                    "default": false,
                    "description": "生成済みの子プロセスにアタッチを試行するかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "processId": {
                    "default": "${command:PickProcess}",
                    "description": "アタッチするプロセスの ID。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "websocketAddress": {
                    "description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type node instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-node:launch": {
            "properties": {
                "args": {
                    "default": [],
                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachSimplePort": {
                    "default": 9229,
                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                    "type": "integer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "console": {
                    "default": "internalConsole",
                    "description": "デバッグ ターゲットの起動場所です。",
                    "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                    ],
                    "enumDescriptions": [
                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                        "VS Code の統合ターミナルです",
                        "ユーザー設定を介して構成できる外部ターミナルです"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "killBehavior": {
                    "default": "forceful",
                    "enum": [
                        "forceful",
                        "polite",
                        "none"
                    ],
                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "program": {
                    "default": "",
                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "stopOnEntry": {
                    "default": true,
                    "description": "起動後、プログラムを自動的に停止します。",
                    "type": [
                        "boolean",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type node instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグするプロセスの TCP/IP アドレス。既定値は 'localhost' です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachExistingChildren": {
                    "default": false,
                    "description": "生成済みの子プロセスにアタッチを試行するかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "true の場合、`--inspect-brk`を待機中の起動済みのプログラムを自動的に再開します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "アタッチ先のデバッグ ポート。既定値は 9229 です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "processId": {
                    "default": "${command:PickProcess}",
                    "description": "アタッチするプロセスの ID。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "websocketAddress": {
                    "description": "アタッチ先の正確な WebSocket アドレスです。指定しない場合は、アドレスとポートから探索されます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node:launch": {
            "properties": {
                "args": {
                    "default": [],
                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachSimplePort": {
                    "default": 9229,
                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                    "type": "integer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "console": {
                    "default": "internalConsole",
                    "description": "デバッグ ターゲットの起動場所です。",
                    "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                    ],
                    "enumDescriptions": [
                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                        "VS Code の統合ターミナルです",
                        "ユーザー設定を介して構成できる外部ターミナルです"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "killBehavior": {
                    "default": "forceful",
                    "enum": [
                        "forceful",
                        "polite",
                        "none"
                    ],
                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "program": {
                    "default": "",
                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "stopOnEntry": {
                    "default": true,
                    "description": "起動後、プログラムを自動的に停止します。",
                    "type": [
                        "boolean",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node-terminal:launch": {
            "properties": {
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "command": {
                    "default": "npm start",
                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node-terminal"
                    ],
                    "enumDescriptions": [
                        "JavaScript デバッグ ターミナル"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-extensionHost:launch": {
            "properties": {
                "args": {
                    "default": [
                        "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebviews": {
                    "default": true,
                    "markdownDescription": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "rendererDebugOptions": {
                    "default": {
                        "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
                    "properties": {
                        "address": {
                            "default": "localhost",
                            "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                            "type": "string"
                        },
                        "browserAttachLocation": {
                            "default": null,
                            "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "enum": [
                                        "ui",
                                        "workspace"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                            "items": {
                                "type": "string",
                                "uniqueItems": true
                            },
                            "type": "array"
                        },
                        "customDescriptionGenerator": {
                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                            "type": "string"
                        },
                        "customPropertiesGenerator": {
                            "deprecated": true,
                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                            "type": "string"
                        },
                        "disableNetworkCache": {
                            "default": true,
                            "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                            "type": "boolean"
                        },
                        "enableContentValidation": {
                            "default": true,
                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                            "type": "boolean"
                        },
                        "inspectUri": {
                            "default": null,
                            "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "outFiles": {
                            "default": [
                                "${workspaceFolder}/**/*.js",
                                "!**/node_modules/**"
                            ],
                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array"
                            ]
                        },
                        "outputCapture": {
                            "default": "console",
                            "enum": [
                                "console",
                                "std"
                            ],
                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                        },
                        "pathMapping": {
                            "default": {},
                            "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                            "type": "object"
                        },
                        "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                            "type": "boolean"
                        },
                        "perScriptSourcemaps": {
                            "default": "auto",
                            "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                            "enum": [
                                "yes",
                                "no",
                                "auto"
                            ],
                            "type": "string"
                        },
                        "port": {
                            "default": 9229,
                            "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                            "type": "number"
                        },
                        "resolveSourceMapLocations": {
                            "default": null,
                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "null"
                            ]
                        },
                        "restart": {
                            "default": false,
                            "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                            "type": "boolean"
                        },
                        "server": {
                            "oneOf": [
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "node my-server.js"
                                    },
                                    "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                    "properties": {
                                        "args": {
                                            "default": [],
                                            "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "string"
                                            ]
                                        },
                                        "attachSimplePort": {
                                            "default": 9229,
                                            "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                            "type": "integer"
                                        },
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "console": {
                                            "default": "internalConsole",
                                            "description": "デバッグ ターゲットの起動場所です。",
                                            "enum": [
                                                "internalConsole",
                                                "integratedTerminal",
                                                "externalTerminal"
                                            ],
                                            "enumDescriptions": [
                                                "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                "VS Code の統合ターミナルです",
                                                "ユーザー設定を介して構成できる外部ターミナルです"
                                            ],
                                            "type": "string"
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "enableTurboSourcemaps": {
                                            "default": true,
                                            "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                            "type": "string"
                                        },
                                        "killBehavior": {
                                            "default": "forceful",
                                            "enum": [
                                                "forceful",
                                                "polite",
                                                "none"
                                            ],
                                            "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                            "type": "boolean"
                                        },
                                        "profileStartup": {
                                            "default": true,
                                            "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                            "type": "boolean"
                                        },
                                        "program": {
                                            "default": "",
                                            "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                            "type": "string"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "restart": {
                                            "default": true,
                                            "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "delay": {
                                                            "default": 1000,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "maxAttempts": {
                                                            "default": 10,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "runtimeArgs": {
                                            "default": [],
                                            "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "runtimeExecutable": {
                                            "default": "node",
                                            "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "runtimeVersion": {
                                            "default": "default",
                                            "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                            "type": "string"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                            "type": "boolean"
                                        },
                                        "stopOnEntry": {
                                            "default": true,
                                            "description": "起動後、プログラムを自動的に停止します。",
                                            "type": [
                                                "boolean",
                                                "string"
                                            ]
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "いくつかのデバッガー操作のタイムアウト。",
                                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "生成される診断出力を構成します。",
                                            "oneOf": [
                                                {
                                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "npm start"
                                    },
                                    "description": "JavaScript デバッグ ターミナル",
                                    "properties": {
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "command": {
                                            "default": "npm start",
                                            "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                            "docDefault": "localRoot || ${workspaceFolder}",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "enableTurboSourcemaps": {
                                            "default": true,
                                            "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                            "type": "boolean"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                            "type": "boolean"
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "いくつかのデバッガー操作のタイムアウト。",
                                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "生成される診断出力を構成します。",
                                            "oneOf": [
                                                {
                                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "showAsyncStacks": {
                            "default": true,
                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "properties": {
                                        "onAttach": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onAttach"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "onceBreakpointResolved": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "skipFiles": {
                            "default": [
                                "<node_internals>/**"
                            ],
                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                            "type": "array"
                        },
                        "smartStep": {
                            "default": true,
                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                            "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                            "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                            "type": "object"
                        },
                        "sourceMapRenames": {
                            "default": true,
                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                            "type": "boolean"
                        },
                        "sourceMaps": {
                            "default": true,
                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                            "type": "boolean"
                        },
                        "targetSelection": {
                            "default": "automatic",
                            "enum": [
                                "pick",
                                "automatic"
                            ],
                            "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                            "type": "string"
                        },
                        "timeout": {
                            "default": 10000,
                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                            "type": "number"
                        },
                        "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "いくつかのデバッガー操作のタイムアウト。",
                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                            "properties": {
                                "hoverEvaluation": {
                                    "default": 500,
                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                    "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                    "type": "number"
                                },
                                "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "trace": {
                            "default": true,
                            "description": "生成される診断出力を構成します。",
                            "oneOf": [
                                {
                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                    "type": "boolean"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "logFile": {
                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "stdio": {
                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "url": {
                            "default": "http://localhost:8080",
                            "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                            "type": "string"
                        },
                        "urlFilter": {
                            "default": "",
                            "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                            "type": "string"
                        },
                        "vueComponentPaths": {
                            "default": [
                                "${workspaceFolder}/**/*.vue"
                            ],
                            "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                            "type": "array"
                        },
                        "webRoot": {
                            "default": "${workspaceFolder}",
                            "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "VS Code への絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-extensionHost"
                    ],
                    "enumDescriptions": [
                        "VS Code 拡張機能の開発"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type extensionHost instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request",
                "args"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "extensionHost:launch": {
            "properties": {
                "args": {
                    "default": [
                        "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Web ワーカー拡張機能ホストにアタッチする必要があるかどうかを構成します。",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebviews": {
                    "default": true,
                    "markdownDescription": "起動した VS Code インスタンスで Web ビューへのアタッチを試行するかどうかを構成します。これはデスクトップの VS Code でのみ機能します。",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableTurboSourcemaps": {
                    "default": true,
                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "rendererDebugOptions": {
                    "default": {
                        "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "レンダラー プロセスにアタッチするときに使用される Chrome の起動オプション ('debugWebviews' または 'debugWebWorkerHost' を使用)。",
                    "properties": {
                        "address": {
                            "default": "localhost",
                            "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                            "type": "string"
                        },
                        "browserAttachLocation": {
                            "default": null,
                            "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "enum": [
                                        "ui",
                                        "workspace"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                            "items": {
                                "type": "string",
                                "uniqueItems": true
                            },
                            "type": "array"
                        },
                        "customDescriptionGenerator": {
                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                            "type": "string"
                        },
                        "customPropertiesGenerator": {
                            "deprecated": true,
                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                            "type": "string"
                        },
                        "disableNetworkCache": {
                            "default": true,
                            "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                            "type": "boolean"
                        },
                        "enableContentValidation": {
                            "default": true,
                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                            "type": "boolean"
                        },
                        "inspectUri": {
                            "default": null,
                            "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "outFiles": {
                            "default": [
                                "${workspaceFolder}/**/*.js",
                                "!**/node_modules/**"
                            ],
                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array"
                            ]
                        },
                        "outputCapture": {
                            "default": "console",
                            "enum": [
                                "console",
                                "std"
                            ],
                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                        },
                        "pathMapping": {
                            "default": {},
                            "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                            "type": "object"
                        },
                        "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                            "type": "boolean"
                        },
                        "perScriptSourcemaps": {
                            "default": "auto",
                            "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                            "enum": [
                                "yes",
                                "no",
                                "auto"
                            ],
                            "type": "string"
                        },
                        "port": {
                            "default": 9229,
                            "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                            "type": "number"
                        },
                        "resolveSourceMapLocations": {
                            "default": null,
                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "null"
                            ]
                        },
                        "restart": {
                            "default": false,
                            "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                            "type": "boolean"
                        },
                        "server": {
                            "oneOf": [
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "node my-server.js"
                                    },
                                    "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                                    "properties": {
                                        "args": {
                                            "default": [],
                                            "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "string"
                                            ]
                                        },
                                        "attachSimplePort": {
                                            "default": 9229,
                                            "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                            "type": "integer"
                                        },
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "console": {
                                            "default": "internalConsole",
                                            "description": "デバッグ ターゲットの起動場所です。",
                                            "enum": [
                                                "internalConsole",
                                                "integratedTerminal",
                                                "externalTerminal"
                                            ],
                                            "enumDescriptions": [
                                                "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                                "VS Code の統合ターミナルです",
                                                "ユーザー設定を介して構成できる外部ターミナルです"
                                            ],
                                            "type": "string"
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "enableTurboSourcemaps": {
                                            "default": true,
                                            "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                            "type": "string"
                                        },
                                        "killBehavior": {
                                            "default": "forceful",
                                            "enum": [
                                                "forceful",
                                                "polite",
                                                "none"
                                            ],
                                            "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                            "type": "boolean"
                                        },
                                        "profileStartup": {
                                            "default": true,
                                            "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                            "type": "boolean"
                                        },
                                        "program": {
                                            "default": "",
                                            "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                            "type": "string"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "restart": {
                                            "default": true,
                                            "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "delay": {
                                                            "default": 1000,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "maxAttempts": {
                                                            "default": 10,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "runtimeArgs": {
                                            "default": [],
                                            "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "runtimeExecutable": {
                                            "default": "node",
                                            "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "runtimeVersion": {
                                            "default": "default",
                                            "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                            "type": "string"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                            "type": "boolean"
                                        },
                                        "stopOnEntry": {
                                            "default": true,
                                            "description": "起動後、プログラムを自動的に停止します。",
                                            "type": [
                                                "boolean",
                                                "string"
                                            ]
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "いくつかのデバッガー操作のタイムアウト。",
                                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "生成される診断出力を構成します。",
                                            "oneOf": [
                                                {
                                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "npm start"
                                    },
                                    "description": "JavaScript デバッグ ターミナル",
                                    "properties": {
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "command": {
                                            "default": "npm start",
                                            "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                            "docDefault": "localRoot || ${workspaceFolder}",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "enableTurboSourcemaps": {
                                            "default": true,
                                            "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                            "type": "boolean"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                            "type": "boolean"
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "いくつかのデバッガー操作のタイムアウト。",
                                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "生成される診断出力を構成します。",
                                            "oneOf": [
                                                {
                                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "showAsyncStacks": {
                            "default": true,
                            "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "properties": {
                                        "onAttach": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onAttach"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "onceBreakpointResolved": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "skipFiles": {
                            "default": [
                                "<node_internals>/**"
                            ],
                            "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                            "type": "array"
                        },
                        "smartStep": {
                            "default": true,
                            "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                            "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                            "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                            "type": "object"
                        },
                        "sourceMapRenames": {
                            "default": true,
                            "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                            "type": "boolean"
                        },
                        "sourceMaps": {
                            "default": true,
                            "description": "JavaScript ソース マップを使用します (存在する場合)。",
                            "type": "boolean"
                        },
                        "targetSelection": {
                            "default": "automatic",
                            "enum": [
                                "pick",
                                "automatic"
                            ],
                            "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                            "type": "string"
                        },
                        "timeout": {
                            "default": 10000,
                            "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                            "type": "number"
                        },
                        "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "いくつかのデバッガー操作のタイムアウト。",
                            "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                            "properties": {
                                "hoverEvaluation": {
                                    "default": 500,
                                    "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                    "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                    "type": "number"
                                },
                                "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "trace": {
                            "default": true,
                            "description": "生成される診断出力を構成します。",
                            "oneOf": [
                                {
                                    "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                    "type": "boolean"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "logFile": {
                                            "description": "ディスク上のログが書き込まれる場所を構成します。",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "stdio": {
                                            "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "url": {
                            "default": "http://localhost:8080",
                            "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                            "type": "string"
                        },
                        "urlFilter": {
                            "default": "",
                            "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                            "type": "string"
                        },
                        "vueComponentPaths": {
                            "default": [
                                "${workspaceFolder}/**/*.vue"
                            ],
                            "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                            "type": "array"
                        },
                        "webRoot": {
                            "default": "${workspaceFolder}",
                            "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "VS Code への絶対パス。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "extensionHost"
                    ],
                    "enumDescriptions": [
                        "VS Code 拡張機能の開発"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request",
                "args"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-chrome:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-chrome"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type chrome instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-chrome:launch": {
            "properties": {
                "browserLaunchLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "ブラウザーで開くローカル HTML ファイル",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeLaunchArgs": {
                    "default": true,
                    "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 0,
                    "description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-chrome"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type chrome instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "chrome:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "chrome"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "chrome:launch": {
            "properties": {
                "browserLaunchLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "ブラウザーで開くローカル HTML ファイル",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeLaunchArgs": {
                    "default": true,
                    "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 0,
                    "description": "ブラウザーがリッスンするポート。既定値は \"0\" で、パイプを介してブラウザーをデバッグするようになります。一般にこれはセキュリティに優れているため、別のツールからブラウザーに接続する必要がなければ、これを選択してください。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "'カナリア'、'安定'、'カスタム'、ブラウザー実行可能ファイルのパスのいずれか。[カスタム] は、カスタム ラッパー、カスタム ビルド、または CHROME_PATH 環境変数を意味します。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "chrome"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-msedge:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": {
                        "pipeName": "MyPipeName"
                    },
                    "description": "UWP でホストされている Webview2 向けデバッグ パイプの 'pipeName' を含むオブジェクト。これはパイプ \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\" 作成時の \"MyTestSharedMemory\" です",
                    "properties": {
                        "pipeName": {
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-msedge"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type msedge instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-msedge:launch": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserLaunchLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "ブラウザーで開くローカル HTML ファイル",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeLaunchArgs": {
                    "default": true,
                    "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": false,
                    "description": "'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-msedge"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type msedge instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "msedge:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "デバッグ対象のブラウザーがリッスンしている IP アドレスまたはホスト名。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所でアタッチします。リモート ワークスペースで (ssh または WSL などを介して) これを使用すると、ローカルではなくリモート マシンでブラウザーをアタッチすることができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "ブラウザーをリモート デバッグするために使用するポート。ブラウザーの起動時に '--remote-debugging-port' として指定します。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "ブラウザー接続が閉じたときに再接続するかどうか",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "URL フィルターと一致するすべてのターゲットに接続する (\"automatic\") か、どれを選択するか尋ねます (\"pick\")。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": {
                        "pipeName": "MyPipeName"
                    },
                    "description": "UWP でホストされている Webview2 向けデバッグ パイプの 'pipeName' を含むオブジェクト。これはパイプ \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\" 作成時の \"MyTestSharedMemory\" です",
                    "properties": {
                        "pipeName": {
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "msedge"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "msedge:launch": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "Web ビューのデバッグ時に、Web ビューがリッスンしている IP アドレスまたはホスト名。設定しない場合、自動的に検出されます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserLaunchLocation": {
                    "default": null,
                    "description": "ブラウザーを強制的に 1 つの場所で起動します。リモート ワークスペース (ssh または WSL などを介して) でこれを使用すると、ローカルではなくリモート マシンでブラウザーを開くことができます。",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "デバッグ セッションが終了した後に実行するクリーンアップです。デバッグ対象のタブのみを閉じるか、ブラウザー全体を閉じます。",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "ランタイム実行可能ファイル用の省略可能な作業ディレクトリです。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "要求ごとのネットワーク キャッシュをスキップするかどうかを制御します",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "ブラウザーの環境キーと値のペアから成るディクショナリ (省略可能)。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "ブラウザーで開くローカル HTML ファイル",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "(デバッグを困難にする可能性のある機能を無効にする) 既定のブラウザー起動引数を起動に含めるかどうか。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeLaunchArgs": {
                    "default": true,
                    "description": "詳細設定: ブラウザーで既定の起動/デバッグ引数を設定するかどうかを指定します。デバッガーでは、ブラウザーが '--remote-debugging-pipe' で提供されているようなパイプ デバッグを使用することを前提としています。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "inspectUri の書き換えに使用する形式: '{curlyBraces}' 内にキーを補間するテンプレート文字列です。使用できるキーは以下のとおりです。\r\n - 'url.*' は、実行中のアプリケーションの解析されたアドレスです。例: '{url.port}', '{url.hostname}'\r\n - 'port' は、Chrome がリッスンするデバッグ ポートです。\r\n - 'browserInspectUri' は、起動したブラウザーのインスペクター URI です。\r\n - 'browserInspectUriPath' は起動したブラウザーのインスペクター URI のパス部分です (例: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\")。\r\n - 'wsProtocol' は、示唆される WebSocket プロトコルです。元の URL が 'https' の場合は 'wss' に設定され、それ以外の場合は 'ws' に設定されます。\r\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "ブラウザーのスクリプトをディスク上のスクリプトに解決するための、ローカル フォルダーへの URL またはパスのマッピング",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "ソース ファイルのベース名を含む一意のソースマップを使用してスクリプトを個別に読み込むかどうか。これは、多数の小さなスクリプトを処理するときに、ソースマップの処理を最適化するために設定できます。\"auto\" に設定すると、これが適切である既知のケースが自動的に検出されます。",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Web ビューのデバッグ時に、Web ビュー デバッガーがリッスンしているポート。設定しない場合、自動的に検出されます。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "'canary'、'stable'、'dev'、'custom'、ブラウザーの実行可能ファイルへのパスのいずれかです。custom は、カスタム ラッパー、カスタム ビルド、または EDGE_PATH 環境変数を指します。",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "起動する Web サーバーを構成します。'ノード' 起動タスクと同じ構成になります。",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "プログラムに渡されるコマンド ライン引数。\r\n\r\n文字列の配列または 1 つの文字列を指定できます。プログラムがターミナルで起動される場合、このプロパティを単一の文字列に設定すると、シェルの引数がエスケープされません。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "設定した場合、指定したポート経由でプロセスにアタッチされます。Node.js プログラムでは一般にもはやこれは不要になっており、子プロセスをデバッグする機能が失われますが、Deno や Docker による起動など、より複雑なシナリオで役立つことがあります。0 に設定されている場合は、ランダムのポートが選択され、--inspect-brk が起動引数に自動的に追加されます。",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "デバッグ ターゲットの起動場所です。",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code デバッグ コンソールです (プログラムからの入力の読み取りはサポートしていません)",
                                        "VS Code の統合ターミナルです",
                                        "ユーザー設定を介して構成できる外部ターミナルです"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "セッションの停止時にデバッグ プロセスを中止する方法を構成します。以下を指定できます:\r\n\r\n- forceful (既定): プロセス ツリーを強制的に停止します。posix 上では SIGKILL を、Windows 上では 'taskkill.exe /F' を 送信します。\r\n- polite: プロセス ツリーを正常に終了します。この方法でシャットダウンした後、不適切なプロセスが引き続き実行される可能性があります。posix 上では SIGTERM を、Windows 上では '/F' (force) フラグなしの taskkill.exe を送信します。\r\n-none: 終了は発生しません。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "true にすると、プロセスが起動したときすぐにプロファイルが開始されます",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "プログラムへの絶対パス。生成される値は、package.json ファイルと開かれたファイルを参照して推測されます。この属性を編集してください。",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "接続が切れた場合に、プログラムへの再接続が試行されます。'True' に設定すると、1 秒に 1 回、無期限に試行されます。代わりに、'delay' と 'maxAttempts' をオブジェクトに指定すれば、再試行の間隔と最大試行回数をカスタマイズできます。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "省略可能な引数がランタイム実行可能ファイルに渡されました。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "使用するランタイム。絶対パス、または PATH 上で使用可能なランタイムの名前のいずれかです。省略した場合は、`node` とみなされます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "使用する `node` ランタイムのバージョン。`nvm` が必要です。",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "起動後、プログラムを自動的に停止します。",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript デバッグ ターミナル",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "デバッガーを自動的に新しい子プロセスにアタッチします。",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "このデバッグ セッションの終了と同時に停止するデバッグ セッションの一覧。",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "起動されたターミナルで実行するコマンド。指定しない場合、ターミナルはプログラムを起動せずに開きます。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "デバッガーがオブジェクト (ローカル変数など) に対して表示するテキスト形式の説明をカスタマイズします。サンプル:\r\n      1. this.toString() // は toString を呼び出して、すべてのオブジェクトを出力します\r\n      2. this.customDescription ? this.customDescription() : defaultValue // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      3. 関数 (def) { return this.customDescription ? this.customDescription() : def } // 利用可能な場合は customDescription メソッドを使用し、そうでない場合は defaultValue を返します\r\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "デバッガーのオブジェクトに表示されるプロパティ (ローカル変数など) をカスタマイズします。サンプル:\r\n    1. { ...this, extraProperty: '12345' } //すべてのオブジェクトに extraProperty 12345 を追加します。\r\n    2. this.customProperties ? this.customProperties() : this // 使用可能であれば customProperties メソッドを使用します。そうでない場合は this 内のプロパティを使用します (既定のプロパティ)\r\n    3. function () { return this.customProperties ? this.customProperties() : this } // 使用可能であれば customDescription メソッドを使用します。そうでない場合は既定のプロパティを返します\r\n\r\n    非推奨: これは、https://github.com/microsoft/vscode/issues/102181 で説明されている方法でこの機能が実装されるまでの間の、一時的な実装です。",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "デバッグされているプログラムの作業ディレクトリへの絶対パスです。LocalRoot を設定すると、cwd はその値と一致するか、またはお客様の workspaceFolder に戻ります",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "ディスク上のファイルの内容が、ランタイムに読み込まれたものと一致していることを Microsoft が確認するかどうかを切り替えます。これは、さまざまなシナリオで役立ち、一部のシナリオでは必須です。ただし、一例としてスクリプトのサーバー側変換がある場合に問題が発生する可能性があります。",
                                    "type": "boolean"
                                },
                                "enableTurboSourcemaps": {
                                    "default": true,
                                    "description": "ソースマップ検出に新しい高速メカニズムを使用するかどうかを構成します",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "環境変数がプログラムに渡されました。値 'null' を指定すると、変数が環境から削除されます。",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "環境変数定義が含まれているファイルへの絶対パス。",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったローカル ディレクトリへのパス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "実行中のノード バージョンを明示的に指定できます。これにより、自動バージョン検出が機能していない場合に特定の動作を無効または有効にすることができます。",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップが有効にされている場合、これらの glob パターンは、生成された JavaScript ファイルを指定します。パターンが '!' で始まる場合、ファイルは除外されます。指定されない場合、生成されたコードは、そのソースと同じディレクトリにあるものと見なされます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "出力メッセージのキャプチャ元の場所: 'console' に設定した場合は既定のデバッグ API、'std' に設定した場合は stdout または stderr ストリームになります。"
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "各入力スクリプトに対してソース マップが読み込まれるのを待機するかどうか。これには、パフォーマンス上のオーバーヘッドが発生しており、'rootPath' が無効でない限り、ディスクからの実行時に安全に無効にされる可能性があります。",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "プログラムの入ったリモート ディレクトリへの絶対パス。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "ソース マップを使用してローカル ファイルを解決できる場所 (フォルダーと URL) の minimatch パターンの一覧。これを使用すると、外部ソースのマップされたコードの誤った破損を回避できます。パターンは、その先頭に \"!\" を付けて除外できます。制約を避けるために、空の配列または null に設定できます。",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "いくつかのデバッガー操作のタイムアウト。",
                                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "生成される診断出力を構成します。",
                                    "oneOf": [
                                        {
                                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "現在の呼び出し履歴にまで至った非同期呼び出しを表示します。",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "デバッグ時にスキップするファイル名またはフォルダー名の配列、またはパス glob: スター パターンと否定は許可されます。たとえば、'[\"**/node_modules/**\"、\"!**/node_modules/my-module/**\"]`",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "元のソースにマップできない生成コードを自動的にステップスルーします。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "ソース ファイルの場所をソースマップが示している場所からディスク上の場所に書き換えるための一連のマッピングです。",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "ソースマップで \"names\" マッピングを使用するかどうかを指定します。これを使用するには、ソース コンテンツを要求する必要がありますが、これは特定のデバッガーでは速度が低下する可能性があります。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "JavaScript ソース マップを使用します (存在する場合)。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Node.js への接続を再試行する期間 (ミリ秒単位)。既定値は 10000 ミリ秒です。",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "いくつかのデバッガー操作のタイムアウト。",
                    "markdownDescription": "いくつかのデバッガー操作のタイムアウト。",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "ホバーされたシンボルの値の評価が中止されるまでの時間。0 に設定すると、ホバー評価がタイムアウトすることはありません。",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "最小時間 (sourceMapMinPause) を使い切った後、ソース マップが処理されるのを待機するために使用可能なセッションあたりの追加時間 (ミリ秒)",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "スクリプトの解析時に各ソース マップが処理されるのを待機する最小時間 (ミリ秒)",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "生成される診断出力を構成します。",
                    "oneOf": [
                        {
                            "description": "診断ログをディスクに書き込むには、トレースを 'true' に設定します。",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "ディスク上のログが書き込まれる場所を構成します。",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "起動したアプリケーションまたはブラウザーからトレース データを返すかどうか。",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "これとまったく同じ URL のタブを検索し、見つかった場合はそれにアタッチします",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "この URL のページを検索し、見つかった場合はそれにアタッチします。ワイルドカード * を使用できます。",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": false,
                    "description": "'true' の場合、デバッガーはランタイム実行可能ファイルを WebView を含むホスト アプリケーションとして処理するため、ユーザーは WebView スクリプトの内容をデバッグできます。",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "既定では、ブラウザーは一時フォルダー内の個別のユーザー プロファイルで起動されます。このオプションを使用して、上書きします。false に設定すると、既定のユーザー プロファイルで起動します。既に `userDataDir` でインスタンスを起動している場合は、新しいブラウザーを起動することはできません。",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "'*.vue' コンポーネントを検索するファイル glob パターンの一覧。既定では、ワークスペース全体を検索します。これは、Vue CLI 4 で Vue のソースマップに必要な追加のルックアップのために指定する必要があります。この特殊な処理を無効にするには、この値を空の配列に設定します。",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "これは、Web サーバー ルートに対するワークスペースの絶対パスを指定します。ディスク上のファイルへの `/app.js` などのパスを解決するために使用されます。\"/\" は、pathMapping の短縮形です",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}",
                                "killOnServerStop": false
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>",
                                "killOnServerStop": false
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                },
                                "killOnServerStop": {
                                    "type": "boolean",
                                    "markdownDescription": "親セッションが停止したときに子セッションを停止します。",
                                    "default": false
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "msedge"
                    ],
                    "enumDescriptions": [
                        "Web アプリ (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        }
    }
}