{
    "id": "vscode://schemas/launch",
    "type": "object",
    "title": "起動",
    "allowTrailingCommas": true,
    "allowComments": true,
    "required": [],
    "default": {
        "version": "0.2.0",
        "configurations": [],
        "compounds": []
    },
    "properties": {
        "version": {
            "type": "string",
            "description": "このファイル形式のバージョン。",
            "default": "0.2.0"
        },
        "configurations": {
            "type": "array",
            "description": "構成の一覧。IntelliSense を使用して、新しい構成を追加したり、既存の構成を編集したります。",
            "items": {
                "defaultSnippets": [
                    {
                        "body": {
                            "name": "${1:Attach}",
                            "port": 9229,
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Attach to a running node program",
                        "label": "Node.js: Attach"
                    },
                    {
                        "body": {
                            "address": "${2:TCP/IP address of process to be debugged}",
                            "localRoot": "^\"\\${workspaceFolder}\"",
                            "name": "${1:Attach to Remote}",
                            "port": 9229,
                            "remoteRoot": "${3:Absolute path to the remote directory containing the program}",
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Attach to the debug port of a remote node program",
                        "label": "Node.js: Attach to Remote Program"
                    },
                    {
                        "body": {
                            "name": "${1:Attach by Process ID}",
                            "processId": "^\"\\${command:PickProcess}\"",
                            "request": "attach",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Open process picker to select node process to attach to",
                        "label": "Node.js: Attach to Process"
                    },
                    {
                        "body": {
                            "name": "${2:Launch Program}",
                            "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Launch a node program in debug mode",
                        "label": "Node.js: Launch Program"
                    },
                    {
                        "body": {
                            "name": "${1:Launch via NPM}",
                            "request": "launch",
                            "runtimeArgs": [
                                "run-script",
                                "debug"
                            ],
                            "runtimeExecutable": "npm",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "label": "Node.js: Launch via npm",
                        "markdownDescription": "Launch a node program through an npm `debug` script"
                    },
                    {
                        "body": {
                            "console": "integratedTerminal",
                            "internalConsoleOptions": "neverOpen",
                            "name": "nodemon",
                            "program": "^\"\\${workspaceFolder}/${1:app.js}\"",
                            "request": "launch",
                            "restart": true,
                            "runtimeExecutable": "nodemon",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Use nodemon to relaunch a debug session on source changes",
                        "label": "Node.js: Nodemon Setup"
                    },
                    {
                        "body": {
                            "args": [
                                "-u",
                                "tdd",
                                "--timeout",
                                "999999",
                                "--colors",
                                "^\"\\${workspaceFolder}/${1:test}\""
                            ],
                            "internalConsoleOptions": "openOnSessionStart",
                            "name": "Mocha Tests",
                            "program": "^\"\\${workspaceFolder}/node_modules/mocha/bin/_mocha\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Debug mocha tests",
                        "label": "Node.js: Mocha Tests"
                    },
                    {
                        "body": {
                            "args": [
                                "${1:generator}"
                            ],
                            "console": "integratedTerminal",
                            "internalConsoleOptions": "neverOpen",
                            "name": "Yeoman ${1:generator}",
                            "program": "^\"\\${workspaceFolder}/node_modules/yo/lib/cli.js\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "label": "Node.js: Yeoman generator",
                        "markdownDescription": "Debug yeoman generator (install by running `npm link` in project folder)"
                    },
                    {
                        "body": {
                            "args": [
                                "${1:task}"
                            ],
                            "name": "Gulp ${1:task}",
                            "program": "^\"\\${workspaceFolder}/node_modules/gulp/bin/gulp.js\"",
                            "request": "launch",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Debug gulp task (make sure to have a local gulp installed in your project)",
                        "label": "Node.js: Gulp task"
                    },
                    {
                        "body": {
                            "name": "Electron Main",
                            "program": "^\"\\${workspaceFolder}/main.js\"",
                            "request": "launch",
                            "runtimeExecutable": "^\"\\${workspaceFolder}/node_modules/.bin/electron\"",
                            "skipFiles": [
                                "<node_internals>/**"
                            ],
                            "type": "node"
                        },
                        "description": "Debug the Electron main process",
                        "label": "Node.js: Electron Main"
                    },
                    {
                        "body": {
                            "command": "npm start",
                            "name": "Run npm start",
                            "request": "launch",
                            "type": "node-terminal"
                        },
                        "description": "Run \"npm start\" in a debug terminal",
                        "label": "Run \"npm start\" in a debug terminal"
                    },
                    {
                        "body": {
                            "args": [
                                "^\"--extensionDevelopmentPath=\\${workspaceFolder}\""
                            ],
                            "name": "Launch Extension",
                            "outFiles": [
                                "^\"\\${workspaceFolder}/out/**/*.js\""
                            ],
                            "preLaunchTask": "npm",
                            "request": "launch",
                            "type": "extensionHost"
                        },
                        "description": "Launch a VS Code extension in debug mode",
                        "label": "VS Code Extension Development"
                    },
                    {
                        "body": {
                            "name": "Launch Chrome",
                            "request": "launch",
                            "type": "chrome",
                            "url": "http://localhost:8080",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Launch Chrome to debug a URL",
                        "label": "Chrome: Launch"
                    },
                    {
                        "body": {
                            "name": "Attach to Chrome",
                            "port": 9222,
                            "request": "attach",
                            "type": "chrome",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Attach to an instance of Chrome already in debug mode",
                        "label": "Chrome: Attach"
                    },
                    {
                        "body": {
                            "name": "Launch Edge",
                            "request": "launch",
                            "type": "msedge",
                            "url": "http://localhost:8080",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Launch Edge to debug a URL",
                        "label": "Edge: Launch"
                    },
                    {
                        "body": {
                            "name": "Attach to Edge",
                            "port": 9222,
                            "request": "attach",
                            "type": "msedge",
                            "webRoot": "^\"${2:\\${workspaceFolder\\}}\""
                        },
                        "description": "Attach to an instance of Edge already in debug mode",
                        "label": "Edge: Attach"
                    }
                ],
                "type": "object",
                "oneOf": [
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachExistingChildren": {
                                "default": false,
                                "description": "Whether to attempt to attach to already-spawned child processes.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "continueOnAttach": {
                                "default": true,
                                "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Debug port to attach to. Default is 9229.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "processId": {
                                "default": "${command:PickProcess}",
                                "description": "ID of process to attach to.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "websocketAddress": {
                                "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type node instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-node:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [],
                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachSimplePort": {
                                "default": 9229,
                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                "type": "integer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "console": {
                                "default": "internalConsole",
                                "description": "Where to launch the debug target.",
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "enumDescriptions": [
                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                    "VS Code's integrated terminal",
                                    "External terminal that can be configured via user settings"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "killBehavior": {
                                "default": "forceful",
                                "enum": [
                                    "forceful",
                                    "polite",
                                    "none"
                                ],
                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling as soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "program": {
                                "default": "",
                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "stopOnEntry": {
                                "default": true,
                                "description": "Automatically stop program after launch.",
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type node instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-node:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachExistingChildren": {
                                "default": false,
                                "description": "Whether to attempt to attach to already-spawned child processes.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "continueOnAttach": {
                                "default": true,
                                "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Debug port to attach to. Default is 9229.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "processId": {
                                "default": "${command:PickProcess}",
                                "description": "ID of process to attach to.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "websocketAddress": {
                                "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [],
                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "attachSimplePort": {
                                "default": 9229,
                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                "type": "integer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "console": {
                                "default": "internalConsole",
                                "description": "Where to launch the debug target.",
                                "enum": [
                                    "internalConsole",
                                    "integratedTerminal",
                                    "externalTerminal"
                                ],
                                "enumDescriptions": [
                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                    "VS Code's integrated terminal",
                                    "External terminal that can be configured via user settings"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "killBehavior": {
                                "default": "forceful",
                                "enum": [
                                    "forceful",
                                    "polite",
                                    "none"
                                ],
                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling as soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "program": {
                                "default": "",
                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": true,
                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "delay": {
                                                "default": 1000,
                                                "minimum": 0,
                                                "type": "number"
                                            },
                                            "maxAttempts": {
                                                "default": 10,
                                                "minimum": 0,
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeVersion": {
                                "default": "default",
                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "stopOnEntry": {
                                "default": true,
                                "description": "Automatically stop program after launch.",
                                "type": [
                                    "boolean",
                                    "string"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node"
                                ],
                                "enumDescriptions": [
                                    "Node.js"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "command": {
                                "default": "npm start",
                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "node-terminal"
                                ],
                                "enumDescriptions": [
                                    "JavaScript Debug Terminal"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/node-terminal:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [
                                    "--extensionDevelopmentPath=${workspaceFolder}"
                                ],
                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebWorkerHost": {
                                "default": true,
                                "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebviews": {
                                "default": true,
                                "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "rendererDebugOptions": {
                                "default": {
                                    "webRoot": "${workspaceFolder}"
                                },
                                "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                                "properties": {
                                    "address": {
                                        "default": "localhost",
                                        "description": "IP address or hostname the debugged browser is listening on.",
                                        "type": "string"
                                    },
                                    "browserAttachLocation": {
                                        "default": null,
                                        "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "enum": [
                                                    "ui",
                                                    "workspace"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "cascadeTerminateToConfigurations": {
                                        "default": [],
                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                        "items": {
                                            "type": "string",
                                            "uniqueItems": true
                                        },
                                        "type": "array"
                                    },
                                    "customDescriptionGenerator": {
                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                        "type": "string"
                                    },
                                    "customPropertiesGenerator": {
                                        "deprecated": true,
                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                        "type": "string"
                                    },
                                    "disableNetworkCache": {
                                        "default": true,
                                        "description": "Controls whether to skip the network cache for each request",
                                        "type": "boolean"
                                    },
                                    "enableContentValidation": {
                                        "default": true,
                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                        "type": "boolean"
                                    },
                                    "inspectUri": {
                                        "default": null,
                                        "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "outFiles": {
                                        "default": [
                                            "${workspaceFolder}/**/*.js",
                                            "!**/node_modules/**"
                                        ],
                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array"
                                        ]
                                    },
                                    "outputCapture": {
                                        "default": "console",
                                        "enum": [
                                            "console",
                                            "std"
                                        ],
                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                    },
                                    "pathMapping": {
                                        "default": {},
                                        "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                        "type": "object"
                                    },
                                    "pauseForSourceMap": {
                                        "default": false,
                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                        "type": "boolean"
                                    },
                                    "perScriptSourcemaps": {
                                        "default": "auto",
                                        "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                        "enum": [
                                            "yes",
                                            "no",
                                            "auto"
                                        ],
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 9229,
                                        "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                        "type": "number"
                                    },
                                    "resolveSourceMapLocations": {
                                        "default": null,
                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array",
                                            "null"
                                        ]
                                    },
                                    "restart": {
                                        "default": false,
                                        "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                        "type": "boolean"
                                    },
                                    "server": {
                                        "oneOf": [
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "node my-server.js"
                                                },
                                                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                                "properties": {
                                                    "args": {
                                                        "default": [],
                                                        "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "string"
                                                        ]
                                                    },
                                                    "attachSimplePort": {
                                                        "default": 9229,
                                                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                        "type": "integer"
                                                    },
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "Attach debugger to new child processes automatically.",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "console": {
                                                        "default": "internalConsole",
                                                        "description": "Where to launch the debug target.",
                                                        "enum": [
                                                            "internalConsole",
                                                            "integratedTerminal",
                                                            "externalTerminal"
                                                        ],
                                                        "enumDescriptions": [
                                                            "VS Code Debug Console (which doesn't support to read input from a program)",
                                                            "VS Code's integrated terminal",
                                                            "External terminal that can be configured via user settings"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "Absolute path to a file containing environment variable definitions.",
                                                        "type": "string"
                                                    },
                                                    "killBehavior": {
                                                        "default": "forceful",
                                                        "enum": [
                                                            "forceful",
                                                            "polite",
                                                            "none"
                                                        ],
                                                        "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "Path to the local directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                        "type": "boolean"
                                                    },
                                                    "profileStartup": {
                                                        "default": true,
                                                        "description": "If true, will start profiling as soon as the process launches",
                                                        "type": "boolean"
                                                    },
                                                    "program": {
                                                        "default": "",
                                                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                        "type": "string"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "Absolute path to the remote directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "restart": {
                                                        "default": true,
                                                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "delay": {
                                                                        "default": 1000,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    },
                                                                    "maxAttempts": {
                                                                        "default": 10,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "runtimeArgs": {
                                                        "default": [],
                                                        "description": "Optional arguments passed to the runtime executable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "runtimeExecutable": {
                                                        "default": "node",
                                                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "runtimeVersion": {
                                                        "default": "default",
                                                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                        "type": "string"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "Show the async calls that led to the current call stack.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "Use JavaScript source maps (if they exist).",
                                                        "type": "boolean"
                                                    },
                                                    "stopOnEntry": {
                                                        "default": true,
                                                        "description": "Automatically stop program after launch.",
                                                        "type": [
                                                            "boolean",
                                                            "string"
                                                        ]
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "Timeouts for several debugger operations.",
                                                        "markdownDescription": "Timeouts for several debugger operations.",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "Configures what diagnostic output is produced.",
                                                        "oneOf": [
                                                            {
                                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "Configures where on disk logs are written.",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "npm start"
                                                },
                                                "description": "JavaScript Debug Terminal",
                                                "properties": {
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "Attach debugger to new child processes automatically.",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "command": {
                                                        "default": "npm start",
                                                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                        "docDefault": "localRoot || ${workspaceFolder}",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "Absolute path to a file containing environment variable definitions.",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "Path to the local directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                        "type": "boolean"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "Absolute path to the remote directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "Show the async calls that led to the current call stack.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "Use JavaScript source maps (if they exist).",
                                                        "type": "boolean"
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "Timeouts for several debugger operations.",
                                                        "markdownDescription": "Timeouts for several debugger operations.",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "Configures what diagnostic output is produced.",
                                                        "oneOf": [
                                                            {
                                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "Configures where on disk logs are written.",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "showAsyncStacks": {
                                        "default": true,
                                        "description": "Show the async calls that led to the current call stack.",
                                        "oneOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "properties": {
                                                    "onAttach": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onAttach"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "properties": {
                                                    "onceBreakpointResolved": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onceBreakpointResolved"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "skipFiles": {
                                        "default": [
                                            "<node_internals>/**"
                                        ],
                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                        "type": "array"
                                    },
                                    "smartStep": {
                                        "default": true,
                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                        "type": "boolean"
                                    },
                                    "sourceMapPathOverrides": {
                                        "default": {
                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                        },
                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                        "type": "object"
                                    },
                                    "sourceMapRenames": {
                                        "default": true,
                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                        "type": "boolean"
                                    },
                                    "sourceMaps": {
                                        "default": true,
                                        "description": "Use JavaScript source maps (if they exist).",
                                        "type": "boolean"
                                    },
                                    "targetSelection": {
                                        "default": "automatic",
                                        "enum": [
                                            "pick",
                                            "automatic"
                                        ],
                                        "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                        "type": "string"
                                    },
                                    "timeout": {
                                        "default": 10000,
                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                        "type": "number"
                                    },
                                    "timeouts": {
                                        "additionalProperties": false,
                                        "default": {},
                                        "description": "Timeouts for several debugger operations.",
                                        "markdownDescription": "Timeouts for several debugger operations.",
                                        "properties": {
                                            "hoverEvaluation": {
                                                "default": 500,
                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                "type": "number"
                                            },
                                            "sourceMapCumulativePause": {
                                                "default": 1000,
                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                "type": "number"
                                            },
                                            "sourceMapMinPause": {
                                                "default": 1000,
                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "trace": {
                                        "default": true,
                                        "description": "Configures what diagnostic output is produced.",
                                        "oneOf": [
                                            {
                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                "type": "boolean"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "logFile": {
                                                        "description": "Configures where on disk logs are written.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "stdio": {
                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "url": {
                                        "default": "http://localhost:8080",
                                        "description": "Will search for a tab with this exact url and attach to it, if found",
                                        "type": "string"
                                    },
                                    "urlFilter": {
                                        "default": "",
                                        "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                        "type": "string"
                                    },
                                    "vueComponentPaths": {
                                        "default": [
                                            "${workspaceFolder}/**/*.vue"
                                        ],
                                        "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                        "type": "array"
                                    },
                                    "webRoot": {
                                        "default": "${workspaceFolder}",
                                        "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Absolute path to VS Code.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-extensionHost"
                                ],
                                "enumDescriptions": [
                                    "VS Code Extension Development"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type extensionHost instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-extensionHost:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request",
                            "args"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "args": {
                                "default": [
                                    "--extensionDevelopmentPath=${workspaceFolder}"
                                ],
                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "autoAttachChildProcesses": {
                                "default": true,
                                "description": "Attach debugger to new child processes automatically.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": "${workspaceFolder}",
                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebWorkerHost": {
                                "default": true,
                                "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugWebviews": {
                                "default": true,
                                "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                                "type": [
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "additionalProperties": {
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "default": {},
                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "envFile": {
                                "default": "${workspaceFolder}/.env",
                                "description": "Absolute path to a file containing environment variable definitions.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "localRoot": {
                                "default": null,
                                "description": "Path to the local directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "nodeVersionHint": {
                                "default": 12,
                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                "minimum": 8,
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "remoteRoot": {
                                "default": null,
                                "description": "Absolute path to the remote directory containing the program.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "rendererDebugOptions": {
                                "default": {
                                    "webRoot": "${workspaceFolder}"
                                },
                                "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                                "properties": {
                                    "address": {
                                        "default": "localhost",
                                        "description": "IP address or hostname the debugged browser is listening on.",
                                        "type": "string"
                                    },
                                    "browserAttachLocation": {
                                        "default": null,
                                        "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                        "oneOf": [
                                            {
                                                "type": "null"
                                            },
                                            {
                                                "enum": [
                                                    "ui",
                                                    "workspace"
                                                ],
                                                "type": "string"
                                            }
                                        ]
                                    },
                                    "cascadeTerminateToConfigurations": {
                                        "default": [],
                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                        "items": {
                                            "type": "string",
                                            "uniqueItems": true
                                        },
                                        "type": "array"
                                    },
                                    "customDescriptionGenerator": {
                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                        "type": "string"
                                    },
                                    "customPropertiesGenerator": {
                                        "deprecated": true,
                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                        "type": "string"
                                    },
                                    "disableNetworkCache": {
                                        "default": true,
                                        "description": "Controls whether to skip the network cache for each request",
                                        "type": "boolean"
                                    },
                                    "enableContentValidation": {
                                        "default": true,
                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                        "type": "boolean"
                                    },
                                    "inspectUri": {
                                        "default": null,
                                        "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "outFiles": {
                                        "default": [
                                            "${workspaceFolder}/**/*.js",
                                            "!**/node_modules/**"
                                        ],
                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array"
                                        ]
                                    },
                                    "outputCapture": {
                                        "default": "console",
                                        "enum": [
                                            "console",
                                            "std"
                                        ],
                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                    },
                                    "pathMapping": {
                                        "default": {},
                                        "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                        "type": "object"
                                    },
                                    "pauseForSourceMap": {
                                        "default": false,
                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                        "type": "boolean"
                                    },
                                    "perScriptSourcemaps": {
                                        "default": "auto",
                                        "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                        "enum": [
                                            "yes",
                                            "no",
                                            "auto"
                                        ],
                                        "type": "string"
                                    },
                                    "port": {
                                        "default": 9229,
                                        "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                        "type": "number"
                                    },
                                    "resolveSourceMapLocations": {
                                        "default": null,
                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": [
                                            "array",
                                            "null"
                                        ]
                                    },
                                    "restart": {
                                        "default": false,
                                        "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                        "type": "boolean"
                                    },
                                    "server": {
                                        "oneOf": [
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "node my-server.js"
                                                },
                                                "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                                "properties": {
                                                    "args": {
                                                        "default": [],
                                                        "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "string"
                                                        ]
                                                    },
                                                    "attachSimplePort": {
                                                        "default": 9229,
                                                        "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                        "type": "integer"
                                                    },
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "Attach debugger to new child processes automatically.",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "console": {
                                                        "default": "internalConsole",
                                                        "description": "Where to launch the debug target.",
                                                        "enum": [
                                                            "internalConsole",
                                                            "integratedTerminal",
                                                            "externalTerminal"
                                                        ],
                                                        "enumDescriptions": [
                                                            "VS Code Debug Console (which doesn't support to read input from a program)",
                                                            "VS Code's integrated terminal",
                                                            "External terminal that can be configured via user settings"
                                                        ],
                                                        "type": "string"
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "Absolute path to a file containing environment variable definitions.",
                                                        "type": "string"
                                                    },
                                                    "killBehavior": {
                                                        "default": "forceful",
                                                        "enum": [
                                                            "forceful",
                                                            "polite",
                                                            "none"
                                                        ],
                                                        "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "Path to the local directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                        "type": "boolean"
                                                    },
                                                    "profileStartup": {
                                                        "default": true,
                                                        "description": "If true, will start profiling as soon as the process launches",
                                                        "type": "boolean"
                                                    },
                                                    "program": {
                                                        "default": "",
                                                        "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                        "type": "string"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "Absolute path to the remote directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "restart": {
                                                        "default": true,
                                                        "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "delay": {
                                                                        "default": 1000,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    },
                                                                    "maxAttempts": {
                                                                        "default": 10,
                                                                        "minimum": 0,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "runtimeArgs": {
                                                        "default": [],
                                                        "description": "Optional arguments passed to the runtime executable.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": "array"
                                                    },
                                                    "runtimeExecutable": {
                                                        "default": "node",
                                                        "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "runtimeVersion": {
                                                        "default": "default",
                                                        "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                        "type": "string"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "Show the async calls that led to the current call stack.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "Use JavaScript source maps (if they exist).",
                                                        "type": "boolean"
                                                    },
                                                    "stopOnEntry": {
                                                        "default": true,
                                                        "description": "Automatically stop program after launch.",
                                                        "type": [
                                                            "boolean",
                                                            "string"
                                                        ]
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "Timeouts for several debugger operations.",
                                                        "markdownDescription": "Timeouts for several debugger operations.",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "Configures what diagnostic output is produced.",
                                                        "oneOf": [
                                                            {
                                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "Configures where on disk logs are written.",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "default": {
                                                    "program": "npm start"
                                                },
                                                "description": "JavaScript Debug Terminal",
                                                "properties": {
                                                    "autoAttachChildProcesses": {
                                                        "default": true,
                                                        "description": "Attach debugger to new child processes automatically.",
                                                        "type": "boolean"
                                                    },
                                                    "cascadeTerminateToConfigurations": {
                                                        "default": [],
                                                        "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                        "items": {
                                                            "type": "string",
                                                            "uniqueItems": true
                                                        },
                                                        "type": "array"
                                                    },
                                                    "command": {
                                                        "default": "npm start",
                                                        "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "customDescriptionGenerator": {
                                                        "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                        "type": "string"
                                                    },
                                                    "customPropertiesGenerator": {
                                                        "deprecated": true,
                                                        "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                        "type": "string"
                                                    },
                                                    "cwd": {
                                                        "default": "${workspaceFolder}",
                                                        "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                        "docDefault": "localRoot || ${workspaceFolder}",
                                                        "type": "string"
                                                    },
                                                    "enableContentValidation": {
                                                        "default": true,
                                                        "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                        "type": "boolean"
                                                    },
                                                    "env": {
                                                        "additionalProperties": {
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "default": {},
                                                        "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                        "type": "object"
                                                    },
                                                    "envFile": {
                                                        "default": "${workspaceFolder}/.env",
                                                        "description": "Absolute path to a file containing environment variable definitions.",
                                                        "type": "string"
                                                    },
                                                    "localRoot": {
                                                        "default": null,
                                                        "description": "Path to the local directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "nodeVersionHint": {
                                                        "default": 12,
                                                        "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                        "minimum": 8,
                                                        "type": "number"
                                                    },
                                                    "outFiles": {
                                                        "default": [
                                                            "${workspaceFolder}/**/*.js",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array"
                                                        ]
                                                    },
                                                    "outputCapture": {
                                                        "default": "console",
                                                        "enum": [
                                                            "console",
                                                            "std"
                                                        ],
                                                        "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                                    },
                                                    "pauseForSourceMap": {
                                                        "default": false,
                                                        "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                        "type": "boolean"
                                                    },
                                                    "remoteRoot": {
                                                        "default": null,
                                                        "description": "Absolute path to the remote directory containing the program.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "resolveSourceMapLocations": {
                                                        "default": [
                                                            "${workspaceFolder}/**",
                                                            "!**/node_modules/**"
                                                        ],
                                                        "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "type": [
                                                            "array",
                                                            "null"
                                                        ]
                                                    },
                                                    "runtimeSourcemapPausePatterns": {
                                                        "default": [],
                                                        "items": {
                                                            "type": "string"
                                                        },
                                                        "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                        "type": "array"
                                                    },
                                                    "showAsyncStacks": {
                                                        "default": true,
                                                        "description": "Show the async calls that led to the current call stack.",
                                                        "oneOf": [
                                                            {
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onAttach": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onAttach"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            {
                                                                "properties": {
                                                                    "onceBreakpointResolved": {
                                                                        "default": 32,
                                                                        "type": "number"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "onceBreakpointResolved"
                                                                ],
                                                                "type": "object"
                                                            }
                                                        ]
                                                    },
                                                    "skipFiles": {
                                                        "default": [
                                                            "<node_internals>/**"
                                                        ],
                                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                        "type": "array"
                                                    },
                                                    "smartStep": {
                                                        "default": true,
                                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMapPathOverrides": {
                                                        "default": {
                                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                                        },
                                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                        "type": "object"
                                                    },
                                                    "sourceMapRenames": {
                                                        "default": true,
                                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                        "type": "boolean"
                                                    },
                                                    "sourceMaps": {
                                                        "default": true,
                                                        "description": "Use JavaScript source maps (if they exist).",
                                                        "type": "boolean"
                                                    },
                                                    "timeout": {
                                                        "default": 10000,
                                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                        "type": "number"
                                                    },
                                                    "timeouts": {
                                                        "additionalProperties": false,
                                                        "default": {},
                                                        "description": "Timeouts for several debugger operations.",
                                                        "markdownDescription": "Timeouts for several debugger operations.",
                                                        "properties": {
                                                            "hoverEvaluation": {
                                                                "default": 500,
                                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                                "type": "number"
                                                            },
                                                            "sourceMapCumulativePause": {
                                                                "default": 1000,
                                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                                "type": "number"
                                                            },
                                                            "sourceMapMinPause": {
                                                                "default": 1000,
                                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    },
                                                    "trace": {
                                                        "default": true,
                                                        "description": "Configures what diagnostic output is produced.",
                                                        "oneOf": [
                                                            {
                                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                                "type": "boolean"
                                                            },
                                                            {
                                                                "additionalProperties": false,
                                                                "properties": {
                                                                    "logFile": {
                                                                        "description": "Configures where on disk logs are written.",
                                                                        "type": [
                                                                            "string",
                                                                            "null"
                                                                        ]
                                                                    },
                                                                    "stdio": {
                                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                                        "type": "boolean"
                                                                    }
                                                                },
                                                                "type": "object"
                                                            }
                                                        ]
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "showAsyncStacks": {
                                        "default": true,
                                        "description": "Show the async calls that led to the current call stack.",
                                        "oneOf": [
                                            {
                                                "type": "boolean"
                                            },
                                            {
                                                "properties": {
                                                    "onAttach": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onAttach"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "properties": {
                                                    "onceBreakpointResolved": {
                                                        "default": 32,
                                                        "type": "number"
                                                    }
                                                },
                                                "required": [
                                                    "onceBreakpointResolved"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "skipFiles": {
                                        "default": [
                                            "<node_internals>/**"
                                        ],
                                        "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                        "type": "array"
                                    },
                                    "smartStep": {
                                        "default": true,
                                        "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                        "type": "boolean"
                                    },
                                    "sourceMapPathOverrides": {
                                        "default": {
                                            "meteor://💻app/*": "${workspaceFolder}/*",
                                            "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                            "webpack://?:*/*": "${workspaceFolder}/*"
                                        },
                                        "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                        "type": "object"
                                    },
                                    "sourceMapRenames": {
                                        "default": true,
                                        "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                        "type": "boolean"
                                    },
                                    "sourceMaps": {
                                        "default": true,
                                        "description": "Use JavaScript source maps (if they exist).",
                                        "type": "boolean"
                                    },
                                    "targetSelection": {
                                        "default": "automatic",
                                        "enum": [
                                            "pick",
                                            "automatic"
                                        ],
                                        "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                        "type": "string"
                                    },
                                    "timeout": {
                                        "default": 10000,
                                        "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                        "type": "number"
                                    },
                                    "timeouts": {
                                        "additionalProperties": false,
                                        "default": {},
                                        "description": "Timeouts for several debugger operations.",
                                        "markdownDescription": "Timeouts for several debugger operations.",
                                        "properties": {
                                            "hoverEvaluation": {
                                                "default": 500,
                                                "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                "type": "number"
                                            },
                                            "sourceMapCumulativePause": {
                                                "default": 1000,
                                                "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                "type": "number"
                                            },
                                            "sourceMapMinPause": {
                                                "default": 1000,
                                                "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                "type": "number"
                                            }
                                        },
                                        "type": "object"
                                    },
                                    "trace": {
                                        "default": true,
                                        "description": "Configures what diagnostic output is produced.",
                                        "oneOf": [
                                            {
                                                "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                "type": "boolean"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "logFile": {
                                                        "description": "Configures where on disk logs are written.",
                                                        "type": [
                                                            "string",
                                                            "null"
                                                        ]
                                                    },
                                                    "stdio": {
                                                        "description": "Whether to return trace data from the launched application or browser.",
                                                        "type": "boolean"
                                                    }
                                                },
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "url": {
                                        "default": "http://localhost:8080",
                                        "description": "Will search for a tab with this exact url and attach to it, if found",
                                        "type": "string"
                                    },
                                    "urlFilter": {
                                        "default": "",
                                        "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                        "type": "string"
                                    },
                                    "vueComponentPaths": {
                                        "default": [
                                            "${workspaceFolder}/**/*.vue"
                                        ],
                                        "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                        "type": "array"
                                    },
                                    "webRoot": {
                                        "default": "${workspaceFolder}",
                                        "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": [
                                    "${workspaceFolder}/**",
                                    "!**/node_modules/**"
                                ],
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "node",
                                "markdownDescription": "Absolute path to VS Code.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeSourcemapPausePatterns": {
                                "default": [],
                                "items": {
                                    "type": "string"
                                },
                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "extensionHost"
                                ],
                                "enumDescriptions": [
                                    "VS Code Extension Development"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/extensionHost:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request",
                            "args"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "IP address or hostname the debugged browser is listening on.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-chrome"
                                ],
                                "enumDescriptions": [
                                    "Web App (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type chrome instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-chrome:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "Optional working directory for the runtime executable.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "Optional dictionary of environment key/value pairs for the browser.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "A local html file to open in the browser",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 0,
                                "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-chrome"
                                ],
                                "enumDescriptions": [
                                    "Web App (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type chrome instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-chrome:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "IP address or hostname the debugged browser is listening on.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "chrome"
                                ],
                                "enumDescriptions": [
                                    "Web App (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/chrome:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "Optional working directory for the runtime executable.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "Optional dictionary of environment key/value pairs for the browser.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "A local html file to open in the browser",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 0,
                                "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "chrome"
                                ],
                                "enumDescriptions": [
                                    "Web App (Chrome)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/chrome:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "IP address or hostname the debugged browser is listening on.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": {
                                    "pipeName": "MyPipeName"
                                },
                                "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                                "properties": {
                                    "pipeName": {
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-msedge"
                                ],
                                "enumDescriptions": [
                                    "Web App (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type msedge instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-msedge:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "Optional working directory for the runtime executable.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "Optional dictionary of environment key/value pairs for the browser.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "A local html file to open in the browser",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": false,
                                "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "pwa-msedge"
                                ],
                                "enumDescriptions": [
                                    "Web App (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "deprecationMessage": "Please use type msedge instead",
                                "doNotSuggest": true,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/pwa-msedge:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "IP address or hostname the debugged browser is listening on.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserAttachLocation": {
                                "default": null,
                                "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "restart": {
                                "default": false,
                                "markdownDescription": "Whether to reconnect if the browser connection is closed",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "targetSelection": {
                                "default": "automatic",
                                "enum": [
                                    "pick",
                                    "automatic"
                                ],
                                "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": {
                                    "pipeName": "MyPipeName"
                                },
                                "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                                "properties": {
                                    "pipeName": {
                                        "type": "string"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "msedge"
                                ],
                                "enumDescriptions": [
                                    "Web App (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "attach"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/msedge:attach",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    },
                    {
                        "properties": {
                            "address": {
                                "default": "localhost",
                                "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "browserLaunchLocation": {
                                "default": null,
                                "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                                "oneOf": [
                                    {
                                        "type": "null"
                                    },
                                    {
                                        "enum": [
                                            "ui",
                                            "workspace"
                                        ],
                                        "type": "string"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cascadeTerminateToConfigurations": {
                                "default": [],
                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                "items": {
                                    "type": "string",
                                    "uniqueItems": true
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cleanUp": {
                                "default": "wholeBrowser",
                                "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                                "enum": [
                                    "wholeBrowser",
                                    "onlyTab"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customDescriptionGenerator": {
                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "customPropertiesGenerator": {
                                "deprecated": true,
                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "cwd": {
                                "default": null,
                                "description": "Optional working directory for the runtime executable.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "disableNetworkCache": {
                                "default": true,
                                "description": "Controls whether to skip the network cache for each request",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "enableContentValidation": {
                                "default": true,
                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "env": {
                                "default": {},
                                "description": "Optional dictionary of environment key/value pairs for the browser.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "file": {
                                "default": "${workspaceFolder}/index.html",
                                "description": "A local html file to open in the browser",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "includeDefaultArgs": {
                                "default": true,
                                "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "inspectUri": {
                                "default": null,
                                "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outFiles": {
                                "default": [
                                    "${workspaceFolder}/**/*.js",
                                    "!**/node_modules/**"
                                ],
                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "outputCapture": {
                                "default": "console",
                                "enum": [
                                    "console",
                                    "std"
                                ],
                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pathMapping": {
                                "default": {},
                                "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "pauseForSourceMap": {
                                "default": false,
                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "perScriptSourcemaps": {
                                "default": "auto",
                                "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                                "enum": [
                                    "yes",
                                    "no",
                                    "auto"
                                ],
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "port": {
                                "default": 9229,
                                "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "profileStartup": {
                                "default": true,
                                "description": "If true, will start profiling soon as the process launches",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "resolveSourceMapLocations": {
                                "default": null,
                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                "items": {
                                    "type": "string"
                                },
                                "type": [
                                    "array",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeArgs": {
                                "default": [],
                                "description": "Optional arguments passed to the runtime executable.",
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "runtimeExecutable": {
                                "default": "stable",
                                "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "server": {
                                "oneOf": [
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "node my-server.js"
                                        },
                                        "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                        "properties": {
                                            "args": {
                                                "default": [],
                                                "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "string"
                                                ]
                                            },
                                            "attachSimplePort": {
                                                "default": 9229,
                                                "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                                "type": "integer"
                                            },
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "console": {
                                                "default": "internalConsole",
                                                "description": "Where to launch the debug target.",
                                                "enum": [
                                                    "internalConsole",
                                                    "integratedTerminal",
                                                    "externalTerminal"
                                                ],
                                                "enumDescriptions": [
                                                    "VS Code Debug Console (which doesn't support to read input from a program)",
                                                    "VS Code's integrated terminal",
                                                    "External terminal that can be configured via user settings"
                                                ],
                                                "type": "string"
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "killBehavior": {
                                                "default": "forceful",
                                                "enum": [
                                                    "forceful",
                                                    "polite",
                                                    "none"
                                                ],
                                                "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "profileStartup": {
                                                "default": true,
                                                "description": "If true, will start profiling as soon as the process launches",
                                                "type": "boolean"
                                            },
                                            "program": {
                                                "default": "",
                                                "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                                "type": "string"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "restart": {
                                                "default": true,
                                                "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "delay": {
                                                                "default": 1000,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            },
                                                            "maxAttempts": {
                                                                "default": 10,
                                                                "minimum": 0,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "runtimeArgs": {
                                                "default": [],
                                                "description": "Optional arguments passed to the runtime executable.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": "array"
                                            },
                                            "runtimeExecutable": {
                                                "default": "node",
                                                "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "runtimeVersion": {
                                                "default": "default",
                                                "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                                "type": "string"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "stopOnEntry": {
                                                "default": true,
                                                "description": "Automatically stop program after launch.",
                                                "type": [
                                                    "boolean",
                                                    "string"
                                                ]
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "default": {
                                            "program": "npm start"
                                        },
                                        "description": "JavaScript Debug Terminal",
                                        "properties": {
                                            "autoAttachChildProcesses": {
                                                "default": true,
                                                "description": "Attach debugger to new child processes automatically.",
                                                "type": "boolean"
                                            },
                                            "cascadeTerminateToConfigurations": {
                                                "default": [],
                                                "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                                "items": {
                                                    "type": "string",
                                                    "uniqueItems": true
                                                },
                                                "type": "array"
                                            },
                                            "command": {
                                                "default": "npm start",
                                                "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "customDescriptionGenerator": {
                                                "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                                "type": "string"
                                            },
                                            "customPropertiesGenerator": {
                                                "deprecated": true,
                                                "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                                "type": "string"
                                            },
                                            "cwd": {
                                                "default": "${workspaceFolder}",
                                                "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                                "docDefault": "localRoot || ${workspaceFolder}",
                                                "type": "string"
                                            },
                                            "enableContentValidation": {
                                                "default": true,
                                                "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                                "type": "boolean"
                                            },
                                            "env": {
                                                "additionalProperties": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "default": {},
                                                "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                                "type": "object"
                                            },
                                            "envFile": {
                                                "default": "${workspaceFolder}/.env",
                                                "description": "Absolute path to a file containing environment variable definitions.",
                                                "type": "string"
                                            },
                                            "localRoot": {
                                                "default": null,
                                                "description": "Path to the local directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "nodeVersionHint": {
                                                "default": 12,
                                                "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                                "minimum": 8,
                                                "type": "number"
                                            },
                                            "outFiles": {
                                                "default": [
                                                    "${workspaceFolder}/**/*.js",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array"
                                                ]
                                            },
                                            "outputCapture": {
                                                "default": "console",
                                                "enum": [
                                                    "console",
                                                    "std"
                                                ],
                                                "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                            },
                                            "pauseForSourceMap": {
                                                "default": false,
                                                "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                                "type": "boolean"
                                            },
                                            "remoteRoot": {
                                                "default": null,
                                                "description": "Absolute path to the remote directory containing the program.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "resolveSourceMapLocations": {
                                                "default": [
                                                    "${workspaceFolder}/**",
                                                    "!**/node_modules/**"
                                                ],
                                                "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                                "items": {
                                                    "type": "string"
                                                },
                                                "type": [
                                                    "array",
                                                    "null"
                                                ]
                                            },
                                            "runtimeSourcemapPausePatterns": {
                                                "default": [],
                                                "items": {
                                                    "type": "string"
                                                },
                                                "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                                "type": "array"
                                            },
                                            "showAsyncStacks": {
                                                "default": true,
                                                "description": "Show the async calls that led to the current call stack.",
                                                "oneOf": [
                                                    {
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onAttach": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onAttach"
                                                        ],
                                                        "type": "object"
                                                    },
                                                    {
                                                        "properties": {
                                                            "onceBreakpointResolved": {
                                                                "default": 32,
                                                                "type": "number"
                                                            }
                                                        },
                                                        "required": [
                                                            "onceBreakpointResolved"
                                                        ],
                                                        "type": "object"
                                                    }
                                                ]
                                            },
                                            "skipFiles": {
                                                "default": [
                                                    "<node_internals>/**"
                                                ],
                                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                                "type": "array"
                                            },
                                            "smartStep": {
                                                "default": true,
                                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                                "type": "boolean"
                                            },
                                            "sourceMapPathOverrides": {
                                                "default": {
                                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                                },
                                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                                "type": "object"
                                            },
                                            "sourceMapRenames": {
                                                "default": true,
                                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                                "type": "boolean"
                                            },
                                            "sourceMaps": {
                                                "default": true,
                                                "description": "Use JavaScript source maps (if they exist).",
                                                "type": "boolean"
                                            },
                                            "timeout": {
                                                "default": 10000,
                                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                                "type": "number"
                                            },
                                            "timeouts": {
                                                "additionalProperties": false,
                                                "default": {},
                                                "description": "Timeouts for several debugger operations.",
                                                "markdownDescription": "Timeouts for several debugger operations.",
                                                "properties": {
                                                    "hoverEvaluation": {
                                                        "default": 500,
                                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                        "type": "number"
                                                    },
                                                    "sourceMapCumulativePause": {
                                                        "default": 1000,
                                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                        "type": "number"
                                                    },
                                                    "sourceMapMinPause": {
                                                        "default": 1000,
                                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                        "type": "number"
                                                    }
                                                },
                                                "type": "object"
                                            },
                                            "trace": {
                                                "default": true,
                                                "description": "Configures what diagnostic output is produced.",
                                                "oneOf": [
                                                    {
                                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                        "type": "boolean"
                                                    },
                                                    {
                                                        "additionalProperties": false,
                                                        "properties": {
                                                            "logFile": {
                                                                "description": "Configures where on disk logs are written.",
                                                                "type": [
                                                                    "string",
                                                                    "null"
                                                                ]
                                                            },
                                                            "stdio": {
                                                                "description": "Whether to return trace data from the launched application or browser.",
                                                                "type": "boolean"
                                                            }
                                                        },
                                                        "type": "object"
                                                    }
                                                ]
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "showAsyncStacks": {
                                "default": true,
                                "description": "Show the async calls that led to the current call stack.",
                                "oneOf": [
                                    {
                                        "type": "boolean"
                                    },
                                    {
                                        "properties": {
                                            "onAttach": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onAttach"
                                        ],
                                        "type": "object"
                                    },
                                    {
                                        "properties": {
                                            "onceBreakpointResolved": {
                                                "default": 32,
                                                "type": "number"
                                            }
                                        },
                                        "required": [
                                            "onceBreakpointResolved"
                                        ],
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "skipFiles": {
                                "default": [
                                    "<node_internals>/**"
                                ],
                                "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "smartStep": {
                                "default": true,
                                "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapPathOverrides": {
                                "default": {
                                    "meteor://💻app/*": "${workspaceFolder}/*",
                                    "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                    "webpack://?:*/*": "${workspaceFolder}/*"
                                },
                                "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMapRenames": {
                                "default": true,
                                "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "sourceMaps": {
                                "default": true,
                                "description": "Use JavaScript source maps (if they exist).",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeout": {
                                "default": 10000,
                                "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                "type": "number",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "timeouts": {
                                "additionalProperties": false,
                                "default": {},
                                "description": "Timeouts for several debugger operations.",
                                "markdownDescription": "Timeouts for several debugger operations.",
                                "properties": {
                                    "hoverEvaluation": {
                                        "default": 500,
                                        "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                        "type": "number"
                                    },
                                    "sourceMapCumulativePause": {
                                        "default": 1000,
                                        "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                        "type": "number"
                                    },
                                    "sourceMapMinPause": {
                                        "default": 1000,
                                        "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                        "type": "number"
                                    }
                                },
                                "type": "object",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "trace": {
                                "default": true,
                                "description": "Configures what diagnostic output is produced.",
                                "oneOf": [
                                    {
                                        "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                        "type": "boolean"
                                    },
                                    {
                                        "additionalProperties": false,
                                        "properties": {
                                            "logFile": {
                                                "description": "Configures where on disk logs are written.",
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "stdio": {
                                                "description": "Whether to return trace data from the launched application or browser.",
                                                "type": "boolean"
                                            }
                                        },
                                        "type": "object"
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "url": {
                                "default": "http://localhost:8080",
                                "description": "Will search for a tab with this exact url and attach to it, if found",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "urlFilter": {
                                "default": "",
                                "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "useWebView": {
                                "default": false,
                                "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                                "type": "boolean",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "userDataDir": {
                                "default": true,
                                "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                                "type": [
                                    "string",
                                    "boolean"
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "vueComponentPaths": {
                                "default": [
                                    "${workspaceFolder}/**/*.vue"
                                ],
                                "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                                "type": "array",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "webRoot": {
                                "default": "${workspaceFolder}",
                                "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                                "type": "string",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "serverReadyAction": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "openExternally"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "openExternally"
                                                ],
                                                "enumDescriptions": [
                                                    "既定のアプリケーションで外部 URI を開きます。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "openExternally"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "debugWithEdge",
                                            "pattern": "listening on port ([0-9]+)",
                                            "uriFormat": "http://localhost:%s",
                                            "webRoot": "${workspaceFolder}"
                                        },
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "debugWithChrome",
                                                    "debugWithEdge"
                                                ],
                                                "enumDescriptions": [
                                                    "'Chrome用のデバッガー' でデバッグを開始します。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "debugWithEdge"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "uriFormat": {
                                                "type": "string",
                                                "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                                "default": "http://localhost:%s"
                                            },
                                            "webRoot": {
                                                "type": "string",
                                                "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                                "default": "${workspaceFolder}"
                                            }
                                        }
                                    },
                                    {
                                        "type": "object",
                                        "additionalProperties": false,
                                        "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                                        "default": {
                                            "action": "startDebugging",
                                            "name": "<launch browser config name>"
                                        },
                                        "required": [
                                            "name"
                                        ],
                                        "properties": {
                                            "action": {
                                                "type": "string",
                                                "enum": [
                                                    "startDebugging"
                                                ],
                                                "enumDescriptions": [
                                                    "別の起動構成を実行してください。"
                                                ],
                                                "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                                "default": "startDebugging"
                                            },
                                            "pattern": {
                                                "type": "string",
                                                "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                                "default": "listening on port ([0-9]+)"
                                            },
                                            "name": {
                                                "type": "string",
                                                "markdownDescription": "実行する起動構成の名前です。",
                                                "default": "Launch Browser"
                                            }
                                        }
                                    }
                                ],
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "type": {
                                "enum": [
                                    "msedge"
                                ],
                                "enumDescriptions": [
                                    "Web App (Edge)"
                                ],
                                "description": "構成の種類。",
                                "pattern": "^(?!node2)",
                                "doNotSuggest": false,
                                "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                                "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                            },
                            "request": {
                                "enum": [
                                    "launch"
                                ],
                                "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "name": {
                                "$ref": "#/definitions/common/properties/name",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "debugServer": {
                                "$ref": "#/definitions/common/properties/debugServer",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "preLaunchTask": {
                                "$ref": "#/definitions/common/properties/preLaunchTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "postDebugTask": {
                                "$ref": "#/definitions/common/properties/postDebugTask",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "presentation": {
                                "$ref": "#/definitions/common/properties/presentation",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "internalConsoleOptions": {
                                "$ref": "#/definitions/common/properties/internalConsoleOptions",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "suppressMultipleSessionWarning": {
                                "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                                "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                                "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                            },
                            "windows": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "Windows 固有の起動構成の属性。",
                                "required": []
                            },
                            "osx": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "OS X 固有の起動構成の属性。",
                                "required": []
                            },
                            "linux": {
                                "$ref": "#/definitions/msedge:launch",
                                "description": "Linux 固有の起動構成の属性。",
                                "required": []
                            }
                        },
                        "required": [
                            "name",
                            "type",
                            "request"
                        ],
                        "additionalProperties": false,
                        "type": "object"
                    }
                ]
            }
        },
        "compounds": {
            "type": "array",
            "description": "複合の一覧。各複合は、同時に起動される複数の構成を参照します。",
            "items": {
                "type": "object",
                "required": [
                    "name",
                    "configurations"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "複合の名前。起動構成のドロップダウン メニューに表示されます。"
                    },
                    "presentation": {
                        "type": "object",
                        "description": "デバッグ構成ドロップダウンとコマンド パレットでこの構成を表示する方法に関するプレゼンテーション オプション。",
                        "properties": {
                            "hidden": {
                                "type": "boolean",
                                "default": false,
                                "description": "この構成を構成ドロップダウンとコマンド パレットに表示するかどうかを制御します。"
                            },
                            "group": {
                                "type": "string",
                                "default": "",
                                "description": "この構成が属するグループ。構成ドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                            },
                            "order": {
                                "type": "number",
                                "default": 1,
                                "description": "グループ内でのこの構成の順序。[構成] のドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                            }
                        },
                        "default": {
                            "hidden": false,
                            "group": "",
                            "order": 1
                        }
                    },
                    "configurations": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "oneOf": [
                                {
                                    "enum": [],
                                    "description": "一意の構成名を使用してください。"
                                },
                                {
                                    "type": "object",
                                    "required": [
                                        "name"
                                    ],
                                    "properties": {
                                        "name": {
                                            "enum": [],
                                            "description": "複合の名前。起動構成のドロップダウン メニューに表示されます。"
                                        },
                                        "folder": {
                                            "enum": [
                                                "vscode-schemas"
                                            ],
                                            "description": "複合があるフォルダーの名前。"
                                        }
                                    }
                                }
                            ]
                        },
                        "description": "この複合の一部として開始される構成の名前。"
                    },
                    "stopAll": {
                        "type": "boolean",
                        "default": false,
                        "description": "1 つのセッションを手動で終了させたときに、すべての複合セッションを停止するかどうかを制御します。"
                    },
                    "preLaunchTask": {
                        "type": "string",
                        "default": "",
                        "description": "複合構成の開始前に実行するタスク。"
                    }
                },
                "default": {
                    "name": "Compound",
                    "configurations": []
                }
            },
            "default": [
                {
                    "name": "Compound",
                    "configurations": []
                }
            ]
        },
        "inputs": {
            "type": "array",
            "description": "ユーザー入力。自由な文字列の入力またはいくつかのオプションからの選択など、ユーザー入力のプロンプトを定義するために使用します。",
            "items": {
                "oneOf": [
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "description"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "promptString"
                                ],
                                "enumDescriptions": [
                                    "'PromptString' 型はユーザーに入力を求める入力ボックスを開きます。"
                                ]
                            },
                            "description": {
                                "type": "string",
                                "description": "ユーザーが入力を求められるときに説明が表示されます。"
                            },
                            "default": {
                                "type": "string",
                                "description": "入力の既定値。"
                            },
                            "password": {
                                "type": "boolean",
                                "description": "パスワード入力を表示するかどうかを制御します。パスワード入力では、入力したテキストが非表示になります。"
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "description",
                            "options"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "pickString"
                                ],
                                "enumDescriptions": [
                                    "'PickString' 型は選択一覧を表示します。"
                                ]
                            },
                            "description": {
                                "type": "string",
                                "description": "ユーザーが入力を求められるときに説明が表示されます。"
                            },
                            "default": {
                                "type": "string",
                                "description": "入力の既定値。"
                            },
                            "options": {
                                "type": "array",
                                "description": "クイック ピックのオプションを定義する文字列の配列です。",
                                "items": {
                                    "oneOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "object",
                                            "required": [
                                                "value"
                                            ],
                                            "additionalProperties": false,
                                            "properties": {
                                                "label": {
                                                    "type": "string",
                                                    "description": "オプションのラベル。"
                                                },
                                                "value": {
                                                    "type": "string",
                                                    "description": "オプションの値。"
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "type",
                            "command"
                        ],
                        "additionalProperties": false,
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "入力の ID を使用して、フォーム ${input:id} の変数を入力に関連付けます。"
                            },
                            "type": {
                                "type": "string",
                                "description": "使用するユーザー入力プロンプトの種類。",
                                "enum": [
                                    "command"
                                ],
                                "enumDescriptions": [
                                    "'command' 型はコマンドを実行します。"
                                ]
                            },
                            "command": {
                                "type": "string",
                                "description": "この入力変数のために実行するコマンド。"
                            },
                            "args": {
                                "oneOf": [
                                    {
                                        "type": "object",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    },
                                    {
                                        "type": "array",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    },
                                    {
                                        "type": "string",
                                        "description": "コマンドに渡された省略可能な引数。"
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
            "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
        }
    },
    "definitions": {
        "common": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "構成の名前。起動構成ドロップダウン メニューに表示されます。",
                    "default": "Launch"
                },
                "debugServer": {
                    "type": "number",
                    "description": "デバッグ拡張機能の開発のみ。ポートが指定の VS Code の場合、サーバー モードで実行中のデバッグ アダプターへの接続が試行されます。",
                    "default": 4711
                },
                "preLaunchTask": {
                    "anyOf": [
                        {
                            "oneOf": []
                        },
                        {
                            "type": [
                                "string"
                            ]
                        }
                    ],
                    "default": "",
                    "defaultSnippets": [
                        {
                            "body": {
                                "task": "",
                                "type": ""
                            }
                        }
                    ],
                    "description": "デバッグ セッションの開始前に実行するタスク。"
                },
                "postDebugTask": {
                    "anyOf": [
                        {
                            "oneOf": []
                        },
                        {
                            "type": [
                                "string"
                            ]
                        }
                    ],
                    "default": "",
                    "defaultSnippets": [
                        {
                            "body": {
                                "task": "",
                                "type": ""
                            }
                        }
                    ],
                    "description": "デバッグ セッションの終了前に実行するタスク。"
                },
                "presentation": {
                    "type": "object",
                    "description": "デバッグ構成ドロップダウンとコマンド パレットでこの構成を表示する方法に関するプレゼンテーション オプション。",
                    "properties": {
                        "hidden": {
                            "type": "boolean",
                            "default": false,
                            "description": "この構成を構成ドロップダウンとコマンド パレットに表示するかどうかを制御します。"
                        },
                        "group": {
                            "type": "string",
                            "default": "",
                            "description": "この構成が属するグループ。構成ドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                        },
                        "order": {
                            "type": "number",
                            "default": 1,
                            "description": "グループ内でのこの構成の順序。[構成] のドロップダウンとコマンド パレットでのグループ化と並べ替えに使用されます。"
                        }
                    },
                    "default": {
                        "hidden": false,
                        "group": "",
                        "order": 1
                    }
                },
                "internalConsoleOptions": {
                    "enum": [
                        "neverOpen",
                        "openOnSessionStart",
                        "openOnFirstSessionStart"
                    ],
                    "default": "openOnFirstSessionStart",
                    "description": "いつ内部デバッグ コンソールを開くかを制御します。",
                    "defaultDefaultValue": "openOnFirstSessionStart",
                    "scope": 3,
                    "restricted": false
                },
                "suppressMultipleSessionWarning": {
                    "type": "boolean",
                    "description": "同じデバッグ構成を複数回起動しようとしたときの警告を無効にしました。",
                    "default": true
                }
            }
        },
        "pwa-node:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachExistingChildren": {
                    "default": false,
                    "description": "Whether to attempt to attach to already-spawned child processes.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Debug port to attach to. Default is 9229.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "processId": {
                    "default": "${command:PickProcess}",
                    "description": "ID of process to attach to.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "websocketAddress": {
                    "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type node instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-node:launch": {
            "properties": {
                "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "type": "integer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                    ],
                    "enumDescriptions": [
                        "VS Code Debug Console (which doesn't support to read input from a program)",
                        "VS Code's integrated terminal",
                        "External terminal that can be configured via user settings"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "killBehavior": {
                    "default": "forceful",
                    "enum": [
                        "forceful",
                        "polite",
                        "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                        "boolean",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type node instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachExistingChildren": {
                    "default": false,
                    "description": "Whether to attempt to attach to already-spawned child processes.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "continueOnAttach": {
                    "default": true,
                    "markdownDescription": "If true, we'll automatically resume programs launched and waiting on `--inspect-brk`",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Debug port to attach to. Default is 9229.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "processId": {
                    "default": "${command:PickProcess}",
                    "description": "ID of process to attach to.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "websocketAddress": {
                    "description": "Exact websocket address to attach to. If unspecified, it will be discovered from the address and port.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node:launch": {
            "properties": {
                "args": {
                    "default": [],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "attachSimplePort": {
                    "default": 9229,
                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                    "type": "integer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "console": {
                    "default": "internalConsole",
                    "description": "Where to launch the debug target.",
                    "enum": [
                        "internalConsole",
                        "integratedTerminal",
                        "externalTerminal"
                    ],
                    "enumDescriptions": [
                        "VS Code Debug Console (which doesn't support to read input from a program)",
                        "VS Code's integrated terminal",
                        "External terminal that can be configured via user settings"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "killBehavior": {
                    "default": "forceful",
                    "enum": [
                        "forceful",
                        "polite",
                        "none"
                    ],
                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling as soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "program": {
                    "default": "",
                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": true,
                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "delay": {
                                    "default": 1000,
                                    "minimum": 0,
                                    "type": "number"
                                },
                                "maxAttempts": {
                                    "default": 10,
                                    "minimum": 0,
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeVersion": {
                    "default": "default",
                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "stopOnEntry": {
                    "default": true,
                    "description": "Automatically stop program after launch.",
                    "type": [
                        "boolean",
                        "string"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node"
                    ],
                    "enumDescriptions": [
                        "Node.js"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "node-terminal:launch": {
            "properties": {
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "command": {
                    "default": "npm start",
                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "node-terminal"
                    ],
                    "enumDescriptions": [
                        "JavaScript Debug Terminal"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-extensionHost:launch": {
            "properties": {
                "args": {
                    "default": [
                        "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebviews": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "rendererDebugOptions": {
                    "default": {
                        "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                    "properties": {
                        "address": {
                            "default": "localhost",
                            "description": "IP address or hostname the debugged browser is listening on.",
                            "type": "string"
                        },
                        "browserAttachLocation": {
                            "default": null,
                            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "enum": [
                                        "ui",
                                        "workspace"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                                "type": "string",
                                "uniqueItems": true
                            },
                            "type": "array"
                        },
                        "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                        },
                        "customPropertiesGenerator": {
                            "deprecated": true,
                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                            "type": "string"
                        },
                        "disableNetworkCache": {
                            "default": true,
                            "description": "Controls whether to skip the network cache for each request",
                            "type": "boolean"
                        },
                        "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                        },
                        "inspectUri": {
                            "default": null,
                            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "outFiles": {
                            "default": [
                                "${workspaceFolder}/**/*.js",
                                "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array"
                            ]
                        },
                        "outputCapture": {
                            "default": "console",
                            "enum": [
                                "console",
                                "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pathMapping": {
                            "default": {},
                            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                            "type": "object"
                        },
                        "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                        },
                        "perScriptSourcemaps": {
                            "default": "auto",
                            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                            "enum": [
                                "yes",
                                "no",
                                "auto"
                            ],
                            "type": "string"
                        },
                        "port": {
                            "default": 9229,
                            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                            "type": "number"
                        },
                        "resolveSourceMapLocations": {
                            "default": null,
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "null"
                            ]
                        },
                        "restart": {
                            "default": false,
                            "markdownDescription": "Whether to reconnect if the browser connection is closed",
                            "type": "boolean"
                        },
                        "server": {
                            "oneOf": [
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "node my-server.js"
                                    },
                                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                    "properties": {
                                        "args": {
                                            "default": [],
                                            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "string"
                                            ]
                                        },
                                        "attachSimplePort": {
                                            "default": 9229,
                                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                            "type": "integer"
                                        },
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "Attach debugger to new child processes automatically.",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "console": {
                                            "default": "internalConsole",
                                            "description": "Where to launch the debug target.",
                                            "enum": [
                                                "internalConsole",
                                                "integratedTerminal",
                                                "externalTerminal"
                                            ],
                                            "enumDescriptions": [
                                                "VS Code Debug Console (which doesn't support to read input from a program)",
                                                "VS Code's integrated terminal",
                                                "External terminal that can be configured via user settings"
                                            ],
                                            "type": "string"
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "Absolute path to a file containing environment variable definitions.",
                                            "type": "string"
                                        },
                                        "killBehavior": {
                                            "default": "forceful",
                                            "enum": [
                                                "forceful",
                                                "polite",
                                                "none"
                                            ],
                                            "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "Path to the local directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                            "type": "boolean"
                                        },
                                        "profileStartup": {
                                            "default": true,
                                            "description": "If true, will start profiling as soon as the process launches",
                                            "type": "boolean"
                                        },
                                        "program": {
                                            "default": "",
                                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                            "type": "string"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "Absolute path to the remote directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "restart": {
                                            "default": true,
                                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "delay": {
                                                            "default": 1000,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "maxAttempts": {
                                                            "default": 10,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "runtimeArgs": {
                                            "default": [],
                                            "description": "Optional arguments passed to the runtime executable.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "runtimeExecutable": {
                                            "default": "node",
                                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "runtimeVersion": {
                                            "default": "default",
                                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                            "type": "string"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "Show the async calls that led to the current call stack.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "Use JavaScript source maps (if they exist).",
                                            "type": "boolean"
                                        },
                                        "stopOnEntry": {
                                            "default": true,
                                            "description": "Automatically stop program after launch.",
                                            "type": [
                                                "boolean",
                                                "string"
                                            ]
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "Timeouts for several debugger operations.",
                                            "markdownDescription": "Timeouts for several debugger operations.",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "Configures what diagnostic output is produced.",
                                            "oneOf": [
                                                {
                                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "Configures where on disk logs are written.",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "Whether to return trace data from the launched application or browser.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "npm start"
                                    },
                                    "description": "JavaScript Debug Terminal",
                                    "properties": {
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "Attach debugger to new child processes automatically.",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "command": {
                                            "default": "npm start",
                                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                            "docDefault": "localRoot || ${workspaceFolder}",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "Absolute path to a file containing environment variable definitions.",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "Path to the local directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                            "type": "boolean"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "Absolute path to the remote directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "Show the async calls that led to the current call stack.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "Use JavaScript source maps (if they exist).",
                                            "type": "boolean"
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "Timeouts for several debugger operations.",
                                            "markdownDescription": "Timeouts for several debugger operations.",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "Configures what diagnostic output is produced.",
                                            "oneOf": [
                                                {
                                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "Configures where on disk logs are written.",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "Whether to return trace data from the launched application or browser.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "properties": {
                                        "onAttach": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onAttach"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "onceBreakpointResolved": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "skipFiles": {
                            "default": [
                                "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                        },
                        "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                            "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                        },
                        "sourceMapRenames": {
                            "default": true,
                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                            "type": "boolean"
                        },
                        "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                        },
                        "targetSelection": {
                            "default": "automatic",
                            "enum": [
                                "pick",
                                "automatic"
                            ],
                            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                            "type": "string"
                        },
                        "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                        },
                        "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations.",
                            "markdownDescription": "Timeouts for several debugger operations.",
                            "properties": {
                                "hoverEvaluation": {
                                    "default": 500,
                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                    "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                },
                                "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                                {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "logFile": {
                                            "description": "Configures where on disk logs are written.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "stdio": {
                                            "description": "Whether to return trace data from the launched application or browser.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "url": {
                            "default": "http://localhost:8080",
                            "description": "Will search for a tab with this exact url and attach to it, if found",
                            "type": "string"
                        },
                        "urlFilter": {
                            "default": "",
                            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                            "type": "string"
                        },
                        "vueComponentPaths": {
                            "default": [
                                "${workspaceFolder}/**/*.vue"
                            ],
                            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                            "type": "array"
                        },
                        "webRoot": {
                            "default": "${workspaceFolder}",
                            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Absolute path to VS Code.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-extensionHost"
                    ],
                    "enumDescriptions": [
                        "VS Code Extension Development"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type extensionHost instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request",
                "args"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "extensionHost:launch": {
            "properties": {
                "args": {
                    "default": [
                        "--extensionDevelopmentPath=${workspaceFolder}"
                    ],
                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "autoAttachChildProcesses": {
                    "default": true,
                    "description": "Attach debugger to new child processes automatically.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": "${workspaceFolder}",
                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebWorkerHost": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to the web worker extension host.",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugWebviews": {
                    "default": true,
                    "markdownDescription": "Configures whether we should try to attach to webviews in the launched VS Code instance. This will only work in desktop VS Code.",
                    "type": [
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "additionalProperties": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "default": {},
                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "envFile": {
                    "default": "${workspaceFolder}/.env",
                    "description": "Absolute path to a file containing environment variable definitions.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "localRoot": {
                    "default": null,
                    "description": "Path to the local directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "nodeVersionHint": {
                    "default": 12,
                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                    "minimum": 8,
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "remoteRoot": {
                    "default": null,
                    "description": "Absolute path to the remote directory containing the program.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "rendererDebugOptions": {
                    "default": {
                        "webRoot": "${workspaceFolder}"
                    },
                    "markdownDescription": "Chrome launch options used when attaching to the renderer process, with `debugWebviews` or `debugWebWorkerHost`.",
                    "properties": {
                        "address": {
                            "default": "localhost",
                            "description": "IP address or hostname the debugged browser is listening on.",
                            "type": "string"
                        },
                        "browserAttachLocation": {
                            "default": null,
                            "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                            "oneOf": [
                                {
                                    "type": "null"
                                },
                                {
                                    "enum": [
                                        "ui",
                                        "workspace"
                                    ],
                                    "type": "string"
                                }
                            ]
                        },
                        "cascadeTerminateToConfigurations": {
                            "default": [],
                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                            "items": {
                                "type": "string",
                                "uniqueItems": true
                            },
                            "type": "array"
                        },
                        "customDescriptionGenerator": {
                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                            "type": "string"
                        },
                        "customPropertiesGenerator": {
                            "deprecated": true,
                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                            "type": "string"
                        },
                        "disableNetworkCache": {
                            "default": true,
                            "description": "Controls whether to skip the network cache for each request",
                            "type": "boolean"
                        },
                        "enableContentValidation": {
                            "default": true,
                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                            "type": "boolean"
                        },
                        "inspectUri": {
                            "default": null,
                            "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                            "type": [
                                "string",
                                "null"
                            ]
                        },
                        "outFiles": {
                            "default": [
                                "${workspaceFolder}/**/*.js",
                                "!**/node_modules/**"
                            ],
                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array"
                            ]
                        },
                        "outputCapture": {
                            "default": "console",
                            "enum": [
                                "console",
                                "std"
                            ],
                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                        },
                        "pathMapping": {
                            "default": {},
                            "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                            "type": "object"
                        },
                        "pauseForSourceMap": {
                            "default": false,
                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                            "type": "boolean"
                        },
                        "perScriptSourcemaps": {
                            "default": "auto",
                            "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                            "enum": [
                                "yes",
                                "no",
                                "auto"
                            ],
                            "type": "string"
                        },
                        "port": {
                            "default": 9229,
                            "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                            "type": "number"
                        },
                        "resolveSourceMapLocations": {
                            "default": null,
                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                            "items": {
                                "type": "string"
                            },
                            "type": [
                                "array",
                                "null"
                            ]
                        },
                        "restart": {
                            "default": false,
                            "markdownDescription": "Whether to reconnect if the browser connection is closed",
                            "type": "boolean"
                        },
                        "server": {
                            "oneOf": [
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "node my-server.js"
                                    },
                                    "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                                    "properties": {
                                        "args": {
                                            "default": [],
                                            "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "string"
                                            ]
                                        },
                                        "attachSimplePort": {
                                            "default": 9229,
                                            "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                            "type": "integer"
                                        },
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "Attach debugger to new child processes automatically.",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "console": {
                                            "default": "internalConsole",
                                            "description": "Where to launch the debug target.",
                                            "enum": [
                                                "internalConsole",
                                                "integratedTerminal",
                                                "externalTerminal"
                                            ],
                                            "enumDescriptions": [
                                                "VS Code Debug Console (which doesn't support to read input from a program)",
                                                "VS Code's integrated terminal",
                                                "External terminal that can be configured via user settings"
                                            ],
                                            "type": "string"
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "Absolute path to a file containing environment variable definitions.",
                                            "type": "string"
                                        },
                                        "killBehavior": {
                                            "default": "forceful",
                                            "enum": [
                                                "forceful",
                                                "polite",
                                                "none"
                                            ],
                                            "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "Path to the local directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                            "type": "boolean"
                                        },
                                        "profileStartup": {
                                            "default": true,
                                            "description": "If true, will start profiling as soon as the process launches",
                                            "type": "boolean"
                                        },
                                        "program": {
                                            "default": "",
                                            "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                            "type": "string"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "Absolute path to the remote directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "restart": {
                                            "default": true,
                                            "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "delay": {
                                                            "default": 1000,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        },
                                                        "maxAttempts": {
                                                            "default": 10,
                                                            "minimum": 0,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "runtimeArgs": {
                                            "default": [],
                                            "description": "Optional arguments passed to the runtime executable.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": "array"
                                        },
                                        "runtimeExecutable": {
                                            "default": "node",
                                            "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "runtimeVersion": {
                                            "default": "default",
                                            "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                            "type": "string"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "Show the async calls that led to the current call stack.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "Use JavaScript source maps (if they exist).",
                                            "type": "boolean"
                                        },
                                        "stopOnEntry": {
                                            "default": true,
                                            "description": "Automatically stop program after launch.",
                                            "type": [
                                                "boolean",
                                                "string"
                                            ]
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "Timeouts for several debugger operations.",
                                            "markdownDescription": "Timeouts for several debugger operations.",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "Configures what diagnostic output is produced.",
                                            "oneOf": [
                                                {
                                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "Configures where on disk logs are written.",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "Whether to return trace data from the launched application or browser.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                },
                                {
                                    "additionalProperties": false,
                                    "default": {
                                        "program": "npm start"
                                    },
                                    "description": "JavaScript Debug Terminal",
                                    "properties": {
                                        "autoAttachChildProcesses": {
                                            "default": true,
                                            "description": "Attach debugger to new child processes automatically.",
                                            "type": "boolean"
                                        },
                                        "cascadeTerminateToConfigurations": {
                                            "default": [],
                                            "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                            "items": {
                                                "type": "string",
                                                "uniqueItems": true
                                            },
                                            "type": "array"
                                        },
                                        "command": {
                                            "default": "npm start",
                                            "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "customDescriptionGenerator": {
                                            "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                            "type": "string"
                                        },
                                        "customPropertiesGenerator": {
                                            "deprecated": true,
                                            "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                            "type": "string"
                                        },
                                        "cwd": {
                                            "default": "${workspaceFolder}",
                                            "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                            "docDefault": "localRoot || ${workspaceFolder}",
                                            "type": "string"
                                        },
                                        "enableContentValidation": {
                                            "default": true,
                                            "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                            "type": "boolean"
                                        },
                                        "env": {
                                            "additionalProperties": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            },
                                            "default": {},
                                            "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                            "type": "object"
                                        },
                                        "envFile": {
                                            "default": "${workspaceFolder}/.env",
                                            "description": "Absolute path to a file containing environment variable definitions.",
                                            "type": "string"
                                        },
                                        "localRoot": {
                                            "default": null,
                                            "description": "Path to the local directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "nodeVersionHint": {
                                            "default": 12,
                                            "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                            "minimum": 8,
                                            "type": "number"
                                        },
                                        "outFiles": {
                                            "default": [
                                                "${workspaceFolder}/**/*.js",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array"
                                            ]
                                        },
                                        "outputCapture": {
                                            "default": "console",
                                            "enum": [
                                                "console",
                                                "std"
                                            ],
                                            "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                        },
                                        "pauseForSourceMap": {
                                            "default": false,
                                            "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                            "type": "boolean"
                                        },
                                        "remoteRoot": {
                                            "default": null,
                                            "description": "Absolute path to the remote directory containing the program.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "resolveSourceMapLocations": {
                                            "default": [
                                                "${workspaceFolder}/**",
                                                "!**/node_modules/**"
                                            ],
                                            "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                            "items": {
                                                "type": "string"
                                            },
                                            "type": [
                                                "array",
                                                "null"
                                            ]
                                        },
                                        "runtimeSourcemapPausePatterns": {
                                            "default": [],
                                            "items": {
                                                "type": "string"
                                            },
                                            "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                            "type": "array"
                                        },
                                        "showAsyncStacks": {
                                            "default": true,
                                            "description": "Show the async calls that led to the current call stack.",
                                            "oneOf": [
                                                {
                                                    "type": "boolean"
                                                },
                                                {
                                                    "properties": {
                                                        "onAttach": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onAttach"
                                                    ],
                                                    "type": "object"
                                                },
                                                {
                                                    "properties": {
                                                        "onceBreakpointResolved": {
                                                            "default": 32,
                                                            "type": "number"
                                                        }
                                                    },
                                                    "required": [
                                                        "onceBreakpointResolved"
                                                    ],
                                                    "type": "object"
                                                }
                                            ]
                                        },
                                        "skipFiles": {
                                            "default": [
                                                "<node_internals>/**"
                                            ],
                                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                            "type": "array"
                                        },
                                        "smartStep": {
                                            "default": true,
                                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                            "type": "boolean"
                                        },
                                        "sourceMapPathOverrides": {
                                            "default": {
                                                "meteor://💻app/*": "${workspaceFolder}/*",
                                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                                "webpack://?:*/*": "${workspaceFolder}/*"
                                            },
                                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                            "type": "object"
                                        },
                                        "sourceMapRenames": {
                                            "default": true,
                                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                            "type": "boolean"
                                        },
                                        "sourceMaps": {
                                            "default": true,
                                            "description": "Use JavaScript source maps (if they exist).",
                                            "type": "boolean"
                                        },
                                        "timeout": {
                                            "default": 10000,
                                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                            "type": "number"
                                        },
                                        "timeouts": {
                                            "additionalProperties": false,
                                            "default": {},
                                            "description": "Timeouts for several debugger operations.",
                                            "markdownDescription": "Timeouts for several debugger operations.",
                                            "properties": {
                                                "hoverEvaluation": {
                                                    "default": 500,
                                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                                    "type": "number"
                                                },
                                                "sourceMapCumulativePause": {
                                                    "default": 1000,
                                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                                    "type": "number"
                                                },
                                                "sourceMapMinPause": {
                                                    "default": 1000,
                                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        },
                                        "trace": {
                                            "default": true,
                                            "description": "Configures what diagnostic output is produced.",
                                            "oneOf": [
                                                {
                                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                                    "type": "boolean"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "logFile": {
                                                            "description": "Configures where on disk logs are written.",
                                                            "type": [
                                                                "string",
                                                                "null"
                                                            ]
                                                        },
                                                        "stdio": {
                                                            "description": "Whether to return trace data from the launched application or browser.",
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "type": "object"
                                                }
                                            ]
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "showAsyncStacks": {
                            "default": true,
                            "description": "Show the async calls that led to the current call stack.",
                            "oneOf": [
                                {
                                    "type": "boolean"
                                },
                                {
                                    "properties": {
                                        "onAttach": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onAttach"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "properties": {
                                        "onceBreakpointResolved": {
                                            "default": 32,
                                            "type": "number"
                                        }
                                    },
                                    "required": [
                                        "onceBreakpointResolved"
                                    ],
                                    "type": "object"
                                }
                            ]
                        },
                        "skipFiles": {
                            "default": [
                                "<node_internals>/**"
                            ],
                            "description": "An array of file or folder names, or path globs, to skip when debugging.",
                            "type": "array"
                        },
                        "smartStep": {
                            "default": true,
                            "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                            "type": "boolean"
                        },
                        "sourceMapPathOverrides": {
                            "default": {
                                "meteor://💻app/*": "${workspaceFolder}/*",
                                "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                "webpack://?:*/*": "${workspaceFolder}/*"
                            },
                            "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                            "type": "object"
                        },
                        "sourceMapRenames": {
                            "default": true,
                            "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                            "type": "boolean"
                        },
                        "sourceMaps": {
                            "default": true,
                            "description": "Use JavaScript source maps (if they exist).",
                            "type": "boolean"
                        },
                        "targetSelection": {
                            "default": "automatic",
                            "enum": [
                                "pick",
                                "automatic"
                            ],
                            "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                            "type": "string"
                        },
                        "timeout": {
                            "default": 10000,
                            "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                            "type": "number"
                        },
                        "timeouts": {
                            "additionalProperties": false,
                            "default": {},
                            "description": "Timeouts for several debugger operations.",
                            "markdownDescription": "Timeouts for several debugger operations.",
                            "properties": {
                                "hoverEvaluation": {
                                    "default": 500,
                                    "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                    "type": "number"
                                },
                                "sourceMapCumulativePause": {
                                    "default": 1000,
                                    "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                    "type": "number"
                                },
                                "sourceMapMinPause": {
                                    "default": 1000,
                                    "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                    "type": "number"
                                }
                            },
                            "type": "object"
                        },
                        "trace": {
                            "default": true,
                            "description": "Configures what diagnostic output is produced.",
                            "oneOf": [
                                {
                                    "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                    "type": "boolean"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "logFile": {
                                            "description": "Configures where on disk logs are written.",
                                            "type": [
                                                "string",
                                                "null"
                                            ]
                                        },
                                        "stdio": {
                                            "description": "Whether to return trace data from the launched application or browser.",
                                            "type": "boolean"
                                        }
                                    },
                                    "type": "object"
                                }
                            ]
                        },
                        "url": {
                            "default": "http://localhost:8080",
                            "description": "Will search for a tab with this exact url and attach to it, if found",
                            "type": "string"
                        },
                        "urlFilter": {
                            "default": "",
                            "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                            "type": "string"
                        },
                        "vueComponentPaths": {
                            "default": [
                                "${workspaceFolder}/**/*.vue"
                            ],
                            "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                            "type": "array"
                        },
                        "webRoot": {
                            "default": "${workspaceFolder}",
                            "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": [
                        "${workspaceFolder}/**",
                        "!**/node_modules/**"
                    ],
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "node",
                    "markdownDescription": "Absolute path to VS Code.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeSourcemapPausePatterns": {
                    "default": [],
                    "items": {
                        "type": "string"
                    },
                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "extensionHost"
                    ],
                    "enumDescriptions": [
                        "VS Code Extension Development"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request",
                "args"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-chrome:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-chrome"
                    ],
                    "enumDescriptions": [
                        "Web App (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type chrome instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-chrome:launch": {
            "properties": {
                "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 0,
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-chrome"
                    ],
                    "enumDescriptions": [
                        "Web App (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type chrome instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "chrome:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "chrome"
                    ],
                    "enumDescriptions": [
                        "Web App (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "chrome:launch": {
            "properties": {
                "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 0,
                    "description": "Port for the browser to listen on. Defaults to \"0\", which will cause the browser to be debugged via pipes, which is generally more secure and should be chosen unless you need to attach to the browser from another tool.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "chrome"
                    ],
                    "enumDescriptions": [
                        "Web App (Chrome)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-msedge:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": {
                        "pipeName": "MyPipeName"
                    },
                    "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                    "properties": {
                        "pipeName": {
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-msedge"
                    ],
                    "enumDescriptions": [
                        "Web App (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type msedge instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "pwa-msedge:launch": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": false,
                    "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "pwa-msedge"
                    ],
                    "enumDescriptions": [
                        "Web App (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "deprecationMessage": "Please use type msedge instead",
                    "doNotSuggest": true,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "msedge:attach": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "IP address or hostname the debugged browser is listening on.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserAttachLocation": {
                    "default": null,
                    "description": "Forces the browser to attach in one location. In a remote workspace (through ssh or WSL, for example) this can be used to attach to a browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "Port to use to remote debugging the browser, given as `--remote-debugging-port` when launching the browser.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "restart": {
                    "default": false,
                    "markdownDescription": "Whether to reconnect if the browser connection is closed",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "targetSelection": {
                    "default": "automatic",
                    "enum": [
                        "pick",
                        "automatic"
                    ],
                    "markdownDescription": "Whether to attach to all targets that match the URL filter (\"automatic\") or ask to pick one (\"pick\").",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": {
                        "pipeName": "MyPipeName"
                    },
                    "description": "An object containing the `pipeName` of a debug pipe for a UWP hosted Webview2. This is the \"MyTestSharedMemory\" when creating the pipe \"\\\\.\\pipe\\LOCAL\\MyTestSharedMemory\"",
                    "properties": {
                        "pipeName": {
                            "type": "string"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "msedge"
                    ],
                    "enumDescriptions": [
                        "Web App (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "attach"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        },
        "msedge:launch": {
            "properties": {
                "address": {
                    "default": "localhost",
                    "description": "When debugging webviews, the IP address or hostname the webview is listening on. Will be automatically discovered if not set.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "browserLaunchLocation": {
                    "default": null,
                    "description": "Forces the browser to be launched in one location. In a remote workspace (through ssh or WSL, for example) this can be used to open the browser on the remote machine rather than locally.",
                    "oneOf": [
                        {
                            "type": "null"
                        },
                        {
                            "enum": [
                                "ui",
                                "workspace"
                            ],
                            "type": "string"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cascadeTerminateToConfigurations": {
                    "default": [],
                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                    "items": {
                        "type": "string",
                        "uniqueItems": true
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cleanUp": {
                    "default": "wholeBrowser",
                    "description": "What clean-up to do after the debugging session finishes. Close only the tab being debug, vs. close the whole browser.",
                    "enum": [
                        "wholeBrowser",
                        "onlyTab"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customDescriptionGenerator": {
                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "customPropertiesGenerator": {
                    "deprecated": true,
                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "cwd": {
                    "default": null,
                    "description": "Optional working directory for the runtime executable.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "disableNetworkCache": {
                    "default": true,
                    "description": "Controls whether to skip the network cache for each request",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "enableContentValidation": {
                    "default": true,
                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "env": {
                    "default": {},
                    "description": "Optional dictionary of environment key/value pairs for the browser.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "file": {
                    "default": "${workspaceFolder}/index.html",
                    "description": "A local html file to open in the browser",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "includeDefaultArgs": {
                    "default": true,
                    "description": "Whether default browser launch arguments (to disable features that may make debugging harder) will be included in the launch.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "inspectUri": {
                    "default": null,
                    "description": "Format to use to rewrite the inspectUri: It's a template string that interpolates keys in `{curlyBraces}`. Available keys are:\n - `url.*` is the parsed address of the running application. For instance, `{url.port}`, `{url.hostname}`\n - `port` is the debug port that Chrome is listening on.\n - `browserInspectUri` is the inspector URI on the launched browser\n - `browserInspectUriPath` is the path part of the inspector URI on the launched browser (e.g.: \"/devtools/browser/e9ec0098-306e-472a-8133-5e42488929c2\").\n - `wsProtocol` is the hinted websocket protocol. This is set to `wss` if the original URL is `https`, or `ws` otherwise.\n",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outFiles": {
                    "default": [
                        "${workspaceFolder}/**/*.js",
                        "!**/node_modules/**"
                    ],
                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "outputCapture": {
                    "default": "console",
                    "enum": [
                        "console",
                        "std"
                    ],
                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`.",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pathMapping": {
                    "default": {},
                    "description": "A mapping of URLs/paths to local folders, to resolve scripts in the Browser to scripts on disk",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "pauseForSourceMap": {
                    "default": false,
                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "perScriptSourcemaps": {
                    "default": "auto",
                    "description": "Whether scripts are loaded individually with unique sourcemaps containing the basename of the source file. This can be set to optimize sourcemap handling when dealing with lots of small scripts. If set to \"auto\", we'll detect known cases where this is appropriate.",
                    "enum": [
                        "yes",
                        "no",
                        "auto"
                    ],
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "port": {
                    "default": 9229,
                    "description": "When debugging webviews, the port the webview debugger is listening on. Will be automatically discovered if not set.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "profileStartup": {
                    "default": true,
                    "description": "If true, will start profiling soon as the process launches",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "resolveSourceMapLocations": {
                    "default": null,
                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "array",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeArgs": {
                    "default": [],
                    "description": "Optional arguments passed to the runtime executable.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "runtimeExecutable": {
                    "default": "stable",
                    "description": "Either 'canary', 'stable', 'dev', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or EDGE_PATH environment variable.",
                    "type": [
                        "string",
                        "null"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "server": {
                    "oneOf": [
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "node my-server.js"
                            },
                            "description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
                            "properties": {
                                "args": {
                                    "default": [],
                                    "description": "Command line arguments passed to the program.\n\nCan be an array of strings or a single string. When the program is launched in a terminal, setting this property to a single string will result in the arguments not being escaped for the shell.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "string"
                                    ]
                                },
                                "attachSimplePort": {
                                    "default": 9229,
                                    "description": "If set, attaches to the process via the given port. This is generally no longer necessary for Node.js programs and loses the ability to debug child processes, but can be useful in more esoteric scenarios such as with Deno and Docker launches. If set to 0, a random port will be chosen and --inspect-brk added to the launch arguments automatically.",
                                    "type": "integer"
                                },
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "console": {
                                    "default": "internalConsole",
                                    "description": "Where to launch the debug target.",
                                    "enum": [
                                        "internalConsole",
                                        "integratedTerminal",
                                        "externalTerminal"
                                    ],
                                    "enumDescriptions": [
                                        "VS Code Debug Console (which doesn't support to read input from a program)",
                                        "VS Code's integrated terminal",
                                        "External terminal that can be configured via user settings"
                                    ],
                                    "type": "string"
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "killBehavior": {
                                    "default": "forceful",
                                    "enum": [
                                        "forceful",
                                        "polite",
                                        "none"
                                    ],
                                    "markdownDescription": "Configures how debug processes are killed when stopping the session. Can be:\n\n- forceful (default): forcefully tears down the process tree. Sends SIGKILL on posix, or `taskkill.exe /F` on Windows.\n- polite: gracefully tears down the process tree. It's possible that misbehaving processes continue to run after shutdown in this way. Sends SIGTERM on posix, or `taskkill.exe` with no `/F` (force) flag on Windows.\n- none: no termination will happen.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "profileStartup": {
                                    "default": true,
                                    "description": "If true, will start profiling as soon as the process launches",
                                    "type": "boolean"
                                },
                                "program": {
                                    "default": "",
                                    "description": "Absolute path to the program. Generated value is guessed by looking at package.json and opened files. Edit this attribute.",
                                    "type": "string"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "restart": {
                                    "default": true,
                                    "description": "Try to reconnect to the program if we lose connection. If set to `true`, we'll try once a second, forever. You can customize the interval and maximum number of attempts by specifying the `delay` and `maxAttempts` in an object instead.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "delay": {
                                                    "default": 1000,
                                                    "minimum": 0,
                                                    "type": "number"
                                                },
                                                "maxAttempts": {
                                                    "default": 10,
                                                    "minimum": 0,
                                                    "type": "number"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                },
                                "runtimeArgs": {
                                    "default": [],
                                    "description": "Optional arguments passed to the runtime executable.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": "array"
                                },
                                "runtimeExecutable": {
                                    "default": "node",
                                    "markdownDescription": "Runtime to use. Either an absolute path or the name of a runtime available on the PATH. If omitted `node` is assumed.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "runtimeVersion": {
                                    "default": "default",
                                    "markdownDescription": "Version of `node` runtime to use. Requires `nvm`.",
                                    "type": "string"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "stopOnEntry": {
                                    "default": true,
                                    "description": "Automatically stop program after launch.",
                                    "type": [
                                        "boolean",
                                        "string"
                                    ]
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        },
                        {
                            "additionalProperties": false,
                            "default": {
                                "program": "npm start"
                            },
                            "description": "JavaScript Debug Terminal",
                            "properties": {
                                "autoAttachChildProcesses": {
                                    "default": true,
                                    "description": "Attach debugger to new child processes automatically.",
                                    "type": "boolean"
                                },
                                "cascadeTerminateToConfigurations": {
                                    "default": [],
                                    "description": "A list of debug sessions which, when this debug session is terminated, will also be stopped.",
                                    "items": {
                                        "type": "string",
                                        "uniqueItems": true
                                    },
                                    "type": "array"
                                },
                                "command": {
                                    "default": "npm start",
                                    "description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "customDescriptionGenerator": {
                                    "description": "Customize the textual description the debugger shows for objects (local variables, etc...). Samples:\n      1. this.toString() // will call toString to print all objects\n      2. this.customDescription ? this.customDescription() : defaultValue // Use customDescription method if available, if not return defaultValue\n      3. function (def) { return this.customDescription ? this.customDescription() : def } // Use customDescription method if available, if not return defaultValue\n      ",
                                    "type": "string"
                                },
                                "customPropertiesGenerator": {
                                    "deprecated": true,
                                    "description": "Customize the properties shown for an object in the debugger (local variables, etc...). Samples:\n    1. { ...this, extraProperty: '12345' } // Add an extraProperty 12345 to all objects\n    2. this.customProperties ? this.customProperties() : this // Use customProperties method if available, if not use the properties in this (the default properties)\n    3. function () { return this.customProperties ? this.customProperties() : this } // Use customDescription method if available, if not return the default properties\n\n    Deprecated: This is a temporary implementation of this feature until we have time to implement it in the way described here: https://github.com/microsoft/vscode/issues/102181",
                                    "type": "string"
                                },
                                "cwd": {
                                    "default": "${workspaceFolder}",
                                    "description": "Absolute path to the working directory of the program being debugged. If you've set localRoot then cwd will match that value otherwise it falls back to your workspaceFolder",
                                    "docDefault": "localRoot || ${workspaceFolder}",
                                    "type": "string"
                                },
                                "enableContentValidation": {
                                    "default": true,
                                    "description": "Toggles whether we verify the contents of files on disk match the ones loaded in the runtime. This is useful in a variety of scenarios and required in some, but can cause issues if you have server-side transformation of scripts, for example.",
                                    "type": "boolean"
                                },
                                "env": {
                                    "additionalProperties": {
                                        "type": [
                                            "string",
                                            "null"
                                        ]
                                    },
                                    "default": {},
                                    "markdownDescription": "Environment variables passed to the program. The value `null` removes the variable from the environment.",
                                    "type": "object"
                                },
                                "envFile": {
                                    "default": "${workspaceFolder}/.env",
                                    "description": "Absolute path to a file containing environment variable definitions.",
                                    "type": "string"
                                },
                                "localRoot": {
                                    "default": null,
                                    "description": "Path to the local directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "nodeVersionHint": {
                                    "default": 12,
                                    "description": "Allows you to explicitly specify the Node version that's running, which can be used to disable or enable certain behaviors in cases where the automatic version detection does not work.",
                                    "minimum": 8,
                                    "type": "number"
                                },
                                "outFiles": {
                                    "default": [
                                        "${workspaceFolder}/**/*.js",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "If source maps are enabled, these glob patterns specify the generated JavaScript files. If a pattern starts with `!` the files are excluded. If not specified, the generated code is expected in the same directory as its source.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array"
                                    ]
                                },
                                "outputCapture": {
                                    "default": "console",
                                    "enum": [
                                        "console",
                                        "std"
                                    ],
                                    "markdownDescription": "From where to capture output messages: the default debug API if set to `console`, or stdout/stderr streams if set to `std`."
                                },
                                "pauseForSourceMap": {
                                    "default": false,
                                    "markdownDescription": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
                                    "type": "boolean"
                                },
                                "remoteRoot": {
                                    "default": null,
                                    "description": "Absolute path to the remote directory containing the program.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "resolveSourceMapLocations": {
                                    "default": [
                                        "${workspaceFolder}/**",
                                        "!**/node_modules/**"
                                    ],
                                    "description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
                                    "items": {
                                        "type": "string"
                                    },
                                    "type": [
                                        "array",
                                        "null"
                                    ]
                                },
                                "runtimeSourcemapPausePatterns": {
                                    "default": [],
                                    "items": {
                                        "type": "string"
                                    },
                                    "markdownDescription": "A list of patterns at which to manually insert entrypoint breakpoints. This can be useful to give the debugger an opportunity to set breakpoints when using sourcemaps that don't exist or can't be detected before launch, such as [with the Serverless framework](https://github.com/microsoft/vscode-js-debug/issues/492).",
                                    "type": "array"
                                },
                                "showAsyncStacks": {
                                    "default": true,
                                    "description": "Show the async calls that led to the current call stack.",
                                    "oneOf": [
                                        {
                                            "type": "boolean"
                                        },
                                        {
                                            "properties": {
                                                "onAttach": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onAttach"
                                            ],
                                            "type": "object"
                                        },
                                        {
                                            "properties": {
                                                "onceBreakpointResolved": {
                                                    "default": 32,
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "onceBreakpointResolved"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "skipFiles": {
                                    "default": [
                                        "<node_internals>/**"
                                    ],
                                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                                    "type": "array"
                                },
                                "smartStep": {
                                    "default": true,
                                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                                    "type": "boolean"
                                },
                                "sourceMapPathOverrides": {
                                    "default": {
                                        "meteor://💻app/*": "${workspaceFolder}/*",
                                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                                        "webpack://?:*/*": "${workspaceFolder}/*"
                                    },
                                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                                    "type": "object"
                                },
                                "sourceMapRenames": {
                                    "default": true,
                                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                                    "type": "boolean"
                                },
                                "sourceMaps": {
                                    "default": true,
                                    "description": "Use JavaScript source maps (if they exist).",
                                    "type": "boolean"
                                },
                                "timeout": {
                                    "default": 10000,
                                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                                    "type": "number"
                                },
                                "timeouts": {
                                    "additionalProperties": false,
                                    "default": {},
                                    "description": "Timeouts for several debugger operations.",
                                    "markdownDescription": "Timeouts for several debugger operations.",
                                    "properties": {
                                        "hoverEvaluation": {
                                            "default": 500,
                                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                                            "type": "number"
                                        },
                                        "sourceMapCumulativePause": {
                                            "default": 1000,
                                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                                            "type": "number"
                                        },
                                        "sourceMapMinPause": {
                                            "default": 1000,
                                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                                            "type": "number"
                                        }
                                    },
                                    "type": "object"
                                },
                                "trace": {
                                    "default": true,
                                    "description": "Configures what diagnostic output is produced.",
                                    "oneOf": [
                                        {
                                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                                            "type": "boolean"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "logFile": {
                                                    "description": "Configures where on disk logs are written.",
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "stdio": {
                                                    "description": "Whether to return trace data from the launched application or browser.",
                                                    "type": "boolean"
                                                }
                                            },
                                            "type": "object"
                                        }
                                    ]
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "showAsyncStacks": {
                    "default": true,
                    "description": "Show the async calls that led to the current call stack.",
                    "oneOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "properties": {
                                "onAttach": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onAttach"
                            ],
                            "type": "object"
                        },
                        {
                            "properties": {
                                "onceBreakpointResolved": {
                                    "default": 32,
                                    "type": "number"
                                }
                            },
                            "required": [
                                "onceBreakpointResolved"
                            ],
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "skipFiles": {
                    "default": [
                        "<node_internals>/**"
                    ],
                    "description": "An array of file or folder names, or path globs, to skip when debugging.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "smartStep": {
                    "default": true,
                    "description": "Automatically step through generated code that cannot be mapped back to the original source.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapPathOverrides": {
                    "default": {
                        "meteor://💻app/*": "${workspaceFolder}/*",
                        "webpack:///./~/*": "${workspaceFolder}/node_modules/*",
                        "webpack://?:*/*": "${workspaceFolder}/*"
                    },
                    "description": "A set of mappings for rewriting the locations of source files from what the sourcemap says, to their locations on disk.",
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMapRenames": {
                    "default": true,
                    "description": "Whether to use the \"names\" mapping in sourcemaps. This requires requesting source content, which can be slow with certain debuggers.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "sourceMaps": {
                    "default": true,
                    "description": "Use JavaScript source maps (if they exist).",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeout": {
                    "default": 10000,
                    "description": "Retry for this number of milliseconds to connect to Node.js. Default is 10000 ms.",
                    "type": "number",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "timeouts": {
                    "additionalProperties": false,
                    "default": {},
                    "description": "Timeouts for several debugger operations.",
                    "markdownDescription": "Timeouts for several debugger operations.",
                    "properties": {
                        "hoverEvaluation": {
                            "default": 500,
                            "description": "Time until value evaluation for hovered symbols is aborted. If set to 0, hover evaluation does never time out.",
                            "type": "number"
                        },
                        "sourceMapCumulativePause": {
                            "default": 1000,
                            "description": "Extra time in milliseconds allowed per session to be spent waiting for source-maps to be processed, after the minimum time (sourceMapMinPause) has been exhausted",
                            "type": "number"
                        },
                        "sourceMapMinPause": {
                            "default": 1000,
                            "description": "Minimum time in milliseconds spent waiting for each source-map to be processed when a script is being parsed",
                            "type": "number"
                        }
                    },
                    "type": "object",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "trace": {
                    "default": true,
                    "description": "Configures what diagnostic output is produced.",
                    "oneOf": [
                        {
                            "description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
                            "type": "boolean"
                        },
                        {
                            "additionalProperties": false,
                            "properties": {
                                "logFile": {
                                    "description": "Configures where on disk logs are written.",
                                    "type": [
                                        "string",
                                        "null"
                                    ]
                                },
                                "stdio": {
                                    "description": "Whether to return trace data from the launched application or browser.",
                                    "type": "boolean"
                                }
                            },
                            "type": "object"
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "url": {
                    "default": "http://localhost:8080",
                    "description": "Will search for a tab with this exact url and attach to it, if found",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "urlFilter": {
                    "default": "",
                    "description": "Will search for a page with this url and attach to it, if found. Can have * wildcards.",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "useWebView": {
                    "default": false,
                    "description": "When 'true', the debugger will treat the runtime executable as a host application that contains a WebView allowing you to debug the WebView script content.",
                    "type": "boolean",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "userDataDir": {
                    "default": true,
                    "description": "By default, the browser is launched with a separate user profile in a temp folder. Use this option to override it. Set to false to launch with your default user profile. A new browser can't be launched if an instance is already running from `userDataDir`.",
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "vueComponentPaths": {
                    "default": [
                        "${workspaceFolder}/**/*.vue"
                    ],
                    "description": "A list of file glob patterns to find `*.vue` components. By default, searches the entire workspace. This needs to be specified due to extra lookups that Vue's sourcemaps require in Vue CLI 4. You can disable this special handling by setting this to an empty array.",
                    "type": "array",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "webRoot": {
                    "default": "${workspaceFolder}",
                    "description": "This specifies the workspace absolute path to the webserver root. Used to resolve paths like `/app.js` to files on disk. Shorthand for a pathMapping for \"/\"",
                    "type": "string",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "serverReadyAction": {
                    "oneOf": [
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "openExternally"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "openExternally"
                                    ],
                                    "enumDescriptions": [
                                        "既定のアプリケーションで外部 URI を開きます。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "openExternally"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "debugWithEdge",
                                "pattern": "listening on port ([0-9]+)",
                                "uriFormat": "http://localhost:%s",
                                "webRoot": "${workspaceFolder}"
                            },
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "debugWithChrome",
                                        "debugWithEdge"
                                    ],
                                    "enumDescriptions": [
                                        "'Chrome用のデバッガー' でデバッグを開始します。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "debugWithEdge"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "uriFormat": {
                                    "type": "string",
                                    "markdownDescription": "ポート番号から URI を構築するときに使用する書式設定文字列。最初の '%s' は、ポート番号に置き換えられます。",
                                    "default": "http://localhost:%s"
                                },
                                "webRoot": {
                                    "type": "string",
                                    "markdownDescription": "'Chrome用デバッガー' のデバッグ構成に値が渡されます。",
                                    "default": "${workspaceFolder}"
                                }
                            }
                        },
                        {
                            "type": "object",
                            "additionalProperties": false,
                            "markdownDescription": "デバッグ中のサーバー プログラムの準備ができたら URI に対して実行します (準備が整うと 'listening on port 3000' または 'Now listening on: https://localhost:5001' の形式でデバッグ コンソールに出力が送信されます)。",
                            "default": {
                                "action": "startDebugging",
                                "name": "<launch browser config name>"
                            },
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "action": {
                                    "type": "string",
                                    "enum": [
                                        "startDebugging"
                                    ],
                                    "enumDescriptions": [
                                        "別の起動構成を実行してください。"
                                    ],
                                    "markdownDescription": "サーバーの準備が整ったときにURIをどうするか。",
                                    "default": "startDebugging"
                                },
                                "pattern": {
                                    "type": "string",
                                    "markdownDescription": "このパターンがデバッグコンソールに表示される場合、サーバーは準備完了です。最初のキャプチャーグループはURIまたはポート番号を含める必要があります。",
                                    "default": "listening on port ([0-9]+)"
                                },
                                "name": {
                                    "type": "string",
                                    "markdownDescription": "実行する起動構成の名前です。",
                                    "default": "Launch Browser"
                                }
                            }
                        }
                    ],
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "type": {
                    "enum": [
                        "msedge"
                    ],
                    "enumDescriptions": [
                        "Web App (Edge)"
                    ],
                    "description": "構成の種類。",
                    "pattern": "^(?!node2)",
                    "doNotSuggest": false,
                    "errorMessage": "デバッグの種類は認識されませんでした。対応するデバッグの拡張機能がインストールされており、有効になっていることを確認してください。",
                    "patternErrorMessage": "\"node2\" はサポートされていません。代わりに \"node\" を使用し、\"protocol\" 属性を \"inspector\" に設定してください。"
                },
                "request": {
                    "enum": [
                        "launch"
                    ],
                    "description": "構成の要求の種類。\"launch\" または \"attach\" です。",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "name": {
                    "$ref": "#/definitions/common/properties/name",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "debugServer": {
                    "$ref": "#/definitions/common/properties/debugServer",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "preLaunchTask": {
                    "$ref": "#/definitions/common/properties/preLaunchTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "postDebugTask": {
                    "$ref": "#/definitions/common/properties/postDebugTask",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "presentation": {
                    "$ref": "#/definitions/common/properties/presentation",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "internalConsoleOptions": {
                    "$ref": "#/definitions/common/properties/internalConsoleOptions",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                },
                "suppressMultipleSessionWarning": {
                    "$ref": "#/definitions/common/properties/suppressMultipleSessionWarning",
                    "pattern": "^(?!.*\\$\\{(env|config|command)\\.)",
                    "patternErrorMessage": "'env.'、'config.'、'command.' は使用されていません。代わりに、'env:'、'config:'、'command:' を使用してください。"
                }
            },
            "required": [
                "name",
                "type",
                "request"
            ],
            "additionalProperties": false,
            "type": "object"
        }
    }
}