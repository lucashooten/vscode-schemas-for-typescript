/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface ResourceLanguage {
  "editor.tabSize"?: number;
  "editor.indentSize"?: "tabSize" | number;
  "editor.insertSpaces"?: boolean;
  "editor.detectIndentation"?: boolean;
  /**
   * Remove trailing auto inserted whitespace.
   */
  "editor.trimAutoWhitespace"?: boolean;
  /**
   * Special handling for large files to disable certain memory intensive features.
   */
  "editor.largeFileOptimizations"?: boolean;
  /**
   * Controls whether completions should be computed based on words in the document.
   */
  "editor.wordBasedSuggestions"?: boolean;
  /**
   * Controls from which documents word based completions are computed.
   */
  "editor.wordBasedSuggestionsMode"?: "currentDocument" | "matchingDocuments" | "allDocuments";
  /**
   * Controls whether the semanticHighlighting is shown for the languages that support it.
   */
  "editor.semanticHighlighting.enabled"?: true | false | "configuredByTheme";
  "editor.stablePeek"?: boolean;
  /**
   * Lines above this length will not be tokenized for performance reasons
   */
  "editor.maxTokenizationLineLength"?: number;
  /**
   * Controls whether the tokenization should happen asynchronously on a web worker.
   */
  "editor.experimental.asyncTokenization"?: boolean;
  /**
   * Defines the bracket symbols that increase or decrease the indentation.
   */
  "editor.language.brackets"?: [] | [string] | [string, string][] | null;
  /**
   * Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.
   */
  "editor.language.colorizedBracketPairs"?: [] | [string] | [string, string][] | null;
  /**
   * Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.
   */
  "diffEditor.maxComputationTime"?: number;
  /**
   * Maximum file size in MB for which to compute diffs. Use 0 for no limit.
   */
  "diffEditor.maxFileSize"?: number;
  /**
   * Controls whether the diff editor shows the diff side by side or inline.
   */
  "diffEditor.renderSideBySide"?: boolean;
  /**
   * When enabled, the diff editor shows arrows in its glyph margin to revert changes.
   */
  "diffEditor.renderMarginRevertIcon"?: boolean;
  /**
   * When enabled, the diff editor ignores changes in leading or trailing whitespace.
   */
  "diffEditor.ignoreTrimWhitespace"?: boolean;
  /**
   * Controls whether the diff editor shows +/- indicators for added/removed changes.
   */
  "diffEditor.renderIndicators"?: boolean;
  /**
   * Controls whether the editor shows CodeLens.
   */
  "diffEditor.codeLens"?: boolean;
  "diffEditor.wordWrap"?: "off" | "on" | "inherit";
  "diffEditor.diffAlgorithm"?: "smart" | "experimental";
  "editor.acceptSuggestionOnCommitCharacter"?: boolean;
  "editor.acceptSuggestionOnEnter"?: "on" | "smart" | "off";
  /**
   * Controls if the UI should run in a mode where it is optimized for screen readers.
   */
  "editor.accessibilitySupport"?: "auto" | "on" | "off";
  /**
   * Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.
   */
  "editor.accessibilityPageSize"?: number;
  /**
   * Controls whether the editor should automatically close brackets after the user adds an opening bracket.
   */
  "editor.autoClosingBrackets"?: "always" | "languageDefined" | "beforeWhitespace" | "never";
  /**
   * Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
   */
  "editor.autoClosingDelete"?: "always" | "auto" | "never";
  /**
   * Controls whether the editor should type over closing quotes or brackets.
   */
  "editor.autoClosingOvertype"?: "always" | "auto" | "never";
  /**
   * Controls whether the editor should automatically close quotes after the user adds an opening quote.
   */
  "editor.autoClosingQuotes"?: "always" | "languageDefined" | "beforeWhitespace" | "never";
  /**
   * Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
   */
  "editor.autoIndent"?: "none" | "keep" | "brackets" | "advanced" | "full";
  /**
   * Controls whether the editor should automatically surround selections when typing quotes or brackets.
   */
  "editor.autoSurround"?: "languageDefined" | "quotes" | "brackets" | "never";
  "editor.bracketPairColorization.enabled"?: boolean;
  /**
   * Controls whether each bracket type has its own independent color pool.
   */
  "editor.bracketPairColorization.independentColorPoolPerBracketType"?: boolean;
  /**
   * Controls whether bracket pair guides are enabled or not.
   */
  "editor.guides.bracketPairs"?: true | "active" | false;
  /**
   * Controls whether horizontal bracket pair guides are enabled or not.
   */
  "editor.guides.bracketPairsHorizontal"?: true | "active" | false;
  /**
   * Controls whether the editor should highlight the active bracket pair.
   */
  "editor.guides.highlightActiveBracketPair"?: boolean;
  /**
   * Controls whether the editor should render indent guides.
   */
  "editor.guides.indentation"?: boolean;
  /**
   * Controls whether the editor should highlight the active indent guide.
   */
  "editor.guides.highlightActiveIndentation"?: true | "always" | false;
  /**
   * Controls whether the editor shows CodeLens.
   */
  "editor.codeLens"?: boolean;
  /**
   * Controls the font family for CodeLens.
   */
  "editor.codeLensFontFamily"?: string;
  "editor.codeLensFontSize"?: number;
  /**
   * Controls whether the editor should render the inline color decorators and color picker.
   */
  "editor.colorDecorators"?: boolean;
  "editor.colorDecoratorsLimit"?: number;
  /**
   * Enable that the selection with the mouse and keys is doing column selection.
   */
  "editor.columnSelection"?: boolean;
  /**
   * Controls whether a space character is inserted when commenting.
   */
  "editor.comments.insertSpace"?: boolean;
  /**
   * Controls if empty lines should be ignored with toggle, add or remove actions for line comments.
   */
  "editor.comments.ignoreEmptyLines"?: boolean;
  /**
   * Controls whether syntax highlighting should be copied into the clipboard.
   */
  "editor.copyWithSyntaxHighlighting"?: boolean;
  /**
   * Control the cursor animation style.
   */
  "editor.cursorBlinking"?: "blink" | "smooth" | "phase" | "expand" | "solid";
  /**
   * Controls whether the smooth caret animation should be enabled.
   */
  "editor.cursorSmoothCaretAnimation"?: "off" | "explicit" | "on";
  /**
   * Controls the cursor style.
   */
  "editor.cursorStyle"?: "line" | "block" | "underline" | "line-thin" | "block-outline" | "underline-thin";
  /**
   * Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.
   */
  "editor.cursorSurroundingLines"?: number;
  /**
   * Controls when `cursorSurroundingLines` should be enforced.
   */
  "editor.cursorSurroundingLinesStyle"?: "default" | "all";
  "editor.cursorWidth"?: number;
  /**
   * Controls whether the editor should allow moving selections via drag and drop.
   */
  "editor.dragAndDrop"?: boolean;
  "editor.dropIntoEditor.enabled"?: boolean;
  /**
   * Controls whether copying without a selection copies the current line.
   */
  "editor.emptySelectionClipboard"?: boolean;
  /**
   * Controls whether whitespace is rendered with a new, experimental method.
   */
  "editor.experimentalWhitespaceRendering"?: "svg" | "font" | "off";
  "editor.fastScrollSensitivity"?: number;
  /**
   * Controls whether the cursor should jump to find matches while typing.
   */
  "editor.find.cursorMoveOnType"?: boolean;
  /**
   * Controls whether the search string in the Find Widget is seeded from the editor selection.
   */
  "editor.find.seedSearchStringFromSelection"?: "never" | "always" | "selection";
  /**
   * Controls the condition for turning on Find in Selection automatically.
   */
  "editor.find.autoFindInSelection"?: "never" | "always" | "multiline";
  /**
   * Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.
   */
  "editor.find.addExtraSpaceOnTop"?: boolean;
  /**
   * Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.
   */
  "editor.find.loop"?: boolean;
  /**
   * Controls whether the editor has code folding enabled.
   */
  "editor.folding"?: boolean;
  /**
   * Controls the strategy for computing folding ranges.
   */
  "editor.foldingStrategy"?: "auto" | "indentation";
  /**
   * Controls whether the editor should highlight folded ranges.
   */
  "editor.foldingHighlight"?: boolean;
  /**
   * Controls whether the editor automatically collapses import ranges.
   */
  "editor.foldingImportsByDefault"?: boolean;
  /**
   * The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.
   */
  "editor.foldingMaximumRegions"?: number;
  /**
   * Controls whether clicking on the empty content after a folded line will unfold the line.
   */
  "editor.unfoldOnClickAfterEndOfLine"?: boolean;
  /**
   * Controls the font family.
   */
  "editor.fontFamily"?: string;
  /**
   * Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.
   */
  "editor.fontLigatures"?: boolean | string;
  /**
   * Controls the font size in pixels.
   */
  "editor.fontSize"?: number;
  /**
   * Controls the font weight. Accepts "normal" and "bold" keywords or numbers between 1 and 1000.
   */
  "editor.fontWeight"?:
    | number
    | string
    | ("normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900");
  /**
   * Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.
   */
  "editor.fontVariations"?: boolean | string;
  /**
   * Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
   */
  "editor.formatOnPaste"?: boolean;
  /**
   * Controls whether the editor should automatically format the line after typing.
   */
  "editor.formatOnType"?: boolean;
  /**
   * Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.
   */
  "editor.glyphMargin"?: boolean;
  "editor.gotoLocation.multiple"?: {
    [k: string]: unknown;
  };
  /**
   * Controls the behavior the 'Go to Definition'-command when multiple target locations exist.
   */
  "editor.gotoLocation.multipleDefinitions"?: "peek" | "gotoAndPeek" | "goto";
  /**
   * Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.
   */
  "editor.gotoLocation.multipleTypeDefinitions"?: "peek" | "gotoAndPeek" | "goto";
  /**
   * Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.
   */
  "editor.gotoLocation.multipleDeclarations"?: "peek" | "gotoAndPeek" | "goto";
  /**
   * Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.
   */
  "editor.gotoLocation.multipleImplementations"?: "peek" | "gotoAndPeek" | "goto";
  /**
   * Controls the behavior the 'Go to References'-command when multiple target locations exist.
   */
  "editor.gotoLocation.multipleReferences"?: "peek" | "gotoAndPeek" | "goto";
  /**
   * Alternative command id that is being executed when the result of 'Go to Definition' is the current location.
   */
  "editor.gotoLocation.alternativeDefinitionCommand"?:
    | ""
    | "editor.action.referenceSearch.trigger"
    | "editor.action.goToReferences"
    | "editor.action.peekImplementation"
    | "editor.action.goToImplementation"
    | "editor.action.peekTypeDefinition"
    | "editor.action.goToTypeDefinition"
    | "editor.action.peekDeclaration"
    | "editor.action.revealDeclaration"
    | "editor.action.peekDefinition"
    | "editor.action.revealDefinitionAside"
    | "editor.action.revealDefinition";
  /**
   * Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.
   */
  "editor.gotoLocation.alternativeTypeDefinitionCommand"?:
    | ""
    | "editor.action.referenceSearch.trigger"
    | "editor.action.goToReferences"
    | "editor.action.peekImplementation"
    | "editor.action.goToImplementation"
    | "editor.action.peekTypeDefinition"
    | "editor.action.goToTypeDefinition"
    | "editor.action.peekDeclaration"
    | "editor.action.revealDeclaration"
    | "editor.action.peekDefinition"
    | "editor.action.revealDefinitionAside"
    | "editor.action.revealDefinition";
  /**
   * Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.
   */
  "editor.gotoLocation.alternativeDeclarationCommand"?:
    | ""
    | "editor.action.referenceSearch.trigger"
    | "editor.action.goToReferences"
    | "editor.action.peekImplementation"
    | "editor.action.goToImplementation"
    | "editor.action.peekTypeDefinition"
    | "editor.action.goToTypeDefinition"
    | "editor.action.peekDeclaration"
    | "editor.action.revealDeclaration"
    | "editor.action.peekDefinition"
    | "editor.action.revealDefinitionAside"
    | "editor.action.revealDefinition";
  /**
   * Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.
   */
  "editor.gotoLocation.alternativeImplementationCommand"?:
    | ""
    | "editor.action.referenceSearch.trigger"
    | "editor.action.goToReferences"
    | "editor.action.peekImplementation"
    | "editor.action.goToImplementation"
    | "editor.action.peekTypeDefinition"
    | "editor.action.goToTypeDefinition"
    | "editor.action.peekDeclaration"
    | "editor.action.revealDeclaration"
    | "editor.action.peekDefinition"
    | "editor.action.revealDefinitionAside"
    | "editor.action.revealDefinition";
  /**
   * Alternative command id that is being executed when the result of 'Go to Reference' is the current location.
   */
  "editor.gotoLocation.alternativeReferenceCommand"?:
    | ""
    | "editor.action.referenceSearch.trigger"
    | "editor.action.goToReferences"
    | "editor.action.peekImplementation"
    | "editor.action.goToImplementation"
    | "editor.action.peekTypeDefinition"
    | "editor.action.goToTypeDefinition"
    | "editor.action.peekDeclaration"
    | "editor.action.revealDeclaration"
    | "editor.action.peekDefinition"
    | "editor.action.revealDefinitionAside"
    | "editor.action.revealDefinition";
  /**
   * Controls whether the cursor should be hidden in the overview ruler.
   */
  "editor.hideCursorInOverviewRuler"?: boolean;
  /**
   * Controls whether the hover is shown.
   */
  "editor.hover.enabled"?: boolean;
  /**
   * Controls the delay in milliseconds after which the hover is shown.
   */
  "editor.hover.delay"?: number;
  /**
   * Controls whether the hover should remain visible when mouse is moved over it.
   */
  "editor.hover.sticky"?: boolean;
  /**
   * Prefer showing hovers above the line, if there's space.
   */
  "editor.hover.above"?: boolean;
  /**
   * Controls whether to automatically show inline suggestions in the editor.
   */
  "editor.inlineSuggest.enabled"?: boolean;
  /**
   * Controls when to show the inline suggestion toolbar.
   */
  "editor.inlineSuggest.showToolbar"?: "always" | "onHover";
  /**
   * Controls the letter spacing in pixels.
   */
  "editor.letterSpacing"?: number;
  /**
   * Enables the Code Action lightbulb in the editor.
   */
  "editor.lightbulb.enabled"?: boolean;
  "editor.lineHeight"?: number;
  /**
   * Controls the display of line numbers.
   */
  "editor.lineNumbers"?: "off" | "on" | "relative" | "interval";
  /**
   * Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.
   */
  "editor.linkedEditing"?: boolean;
  /**
   * Controls whether the editor should detect links and make them clickable.
   */
  "editor.links"?: boolean;
  /**
   * Highlight matching brackets.
   */
  "editor.matchBrackets"?: "always" | "near" | "never";
  /**
   * Controls whether the minimap is shown.
   */
  "editor.minimap.enabled"?: boolean;
  /**
   * Controls whether the minimap is hidden automatically.
   */
  "editor.minimap.autohide"?: boolean;
  /**
   * Controls the size of the minimap.
   */
  "editor.minimap.size"?: "proportional" | "fill" | "fit";
  /**
   * Controls the side where to render the minimap.
   */
  "editor.minimap.side"?: "left" | "right";
  /**
   * Controls when the minimap slider is shown.
   */
  "editor.minimap.showSlider"?: "always" | "mouseover";
  /**
   * Scale of content drawn in the minimap: 1, 2 or 3.
   */
  "editor.minimap.scale"?: 1 | 2 | 3;
  /**
   * Render the actual characters on a line as opposed to color blocks.
   */
  "editor.minimap.renderCharacters"?: boolean;
  /**
   * Limit the width of the minimap to render at most a certain number of columns.
   */
  "editor.minimap.maxColumn"?: number;
  "editor.mouseWheelScrollSensitivity"?: number;
  "editor.mouseWheelZoom"?: boolean;
  /**
   * Merge multiple cursors when they are overlapping.
   */
  "editor.multiCursorMergeOverlapping"?: boolean;
  "editor.multiCursorModifier"?: "ctrlCmd" | "alt";
  "editor.multiCursorPaste"?: "spread" | "full";
  "editor.multiCursorLimit"?: number;
  /**
   * Controls whether the editor should highlight semantic symbol occurrences.
   */
  "editor.occurrencesHighlight"?: boolean;
  /**
   * Controls whether a border should be drawn around the overview ruler.
   */
  "editor.overviewRulerBorder"?: boolean;
  /**
   * Controls the amount of space between the top edge of the editor and the first line.
   */
  "editor.padding.top"?: number;
  /**
   * Controls the amount of space between the bottom edge of the editor and the last line.
   */
  "editor.padding.bottom"?: number;
  /**
   * Enables a pop-up that shows parameter documentation and type information as you type.
   */
  "editor.parameterHints.enabled"?: boolean;
  /**
   * Controls whether the parameter hints menu cycles or closes when reaching the end of the list.
   */
  "editor.parameterHints.cycle"?: boolean;
  /**
   * Controls whether to focus the inline editor or the tree in the peek widget.
   */
  "editor.peekWidgetDefaultFocus"?: "tree" | "editor";
  /**
   * Controls whether the Go to Definition mouse gesture always opens the peek widget.
   */
  "editor.definitionLinkOpensInPeek"?: boolean;
  "editor.quickSuggestions"?: {
    /**
     * Enable quick suggestions inside strings.
     */
    strings?: boolean | ("on" | "inline" | "off");
    /**
     * Enable quick suggestions inside comments.
     */
    comments?: boolean | ("on" | "inline" | "off");
    /**
     * Enable quick suggestions outside of strings and comments.
     */
    other?: boolean | ("on" | "inline" | "off");
  };
  /**
   * Controls the delay in milliseconds after which quick suggestions will show up.
   */
  "editor.quickSuggestionsDelay"?: number;
  /**
   * Controls whether the editor auto renames on type.
   */
  "editor.renameOnType"?: boolean;
  /**
   * Controls whether the editor should render control characters.
   */
  "editor.renderControlCharacters"?: boolean;
  /**
   * Render last line number when the file ends with a newline.
   */
  "editor.renderFinalNewline"?: "off" | "on" | "dimmed";
  /**
   * Controls how the editor should render the current line highlight.
   */
  "editor.renderLineHighlight"?: "none" | "gutter" | "line" | "all";
  /**
   * Controls if the editor should render the current line highlight only when the editor is focused.
   */
  "editor.renderLineHighlightOnlyWhenFocus"?: boolean;
  /**
   * Controls how the editor should render whitespace characters.
   */
  "editor.renderWhitespace"?: "none" | "boundary" | "selection" | "trailing" | "all";
  /**
   * Controls whether selections should have rounded corners.
   */
  "editor.roundedSelection"?: boolean;
  /**
   * Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
   */
  "editor.rulers"?: (
    | number
    | {
        /**
         * Number of monospace characters at which this editor ruler will render.
         */
        column?: number;
        /**
         * Color of this editor ruler.
         */
        color?: string;
        [k: string]: unknown;
      }
  )[];
  /**
   * Controls the visibility of the vertical scrollbar.
   */
  "editor.scrollbar.vertical"?: "auto" | "visible" | "hidden";
  /**
   * Controls the visibility of the horizontal scrollbar.
   */
  "editor.scrollbar.horizontal"?: "auto" | "visible" | "hidden";
  /**
   * The width of the vertical scrollbar.
   */
  "editor.scrollbar.verticalScrollbarSize"?: number;
  /**
   * The height of the horizontal scrollbar.
   */
  "editor.scrollbar.horizontalScrollbarSize"?: number;
  /**
   * Controls whether clicks scroll by page or jump to click position.
   */
  "editor.scrollbar.scrollByPage"?: boolean;
  /**
   * Controls the number of extra characters beyond which the editor will scroll horizontally.
   */
  "editor.scrollBeyondLastColumn"?: number;
  /**
   * Controls whether the editor will scroll beyond the last line.
   */
  "editor.scrollBeyondLastLine"?: boolean;
  /**
   * Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.
   */
  "editor.scrollPredominantAxis"?: boolean;
  /**
   * Controls whether the editor should highlight matches similar to the selection.
   */
  "editor.selectionHighlight"?: boolean;
  /**
   * Controls when the folding controls on the gutter are shown.
   */
  "editor.showFoldingControls"?: "always" | "never" | "mouseover";
  /**
   * Controls fading out of unused code.
   */
  "editor.showUnused"?: boolean;
  /**
   * Controls whether snippets are shown with other suggestions and how they are sorted.
   */
  "editor.snippetSuggestions"?: "top" | "bottom" | "inline" | "none";
  /**
   * Whether leading and trailing whitespace should always be selected.
   */
  "editor.smartSelect.selectLeadingAndTrailingWhitespace"?: boolean;
  /**
   * Controls whether the editor will scroll using an animation.
   */
  "editor.smoothScrolling"?: boolean;
  /**
   * Shows the nested current scopes during the scroll at the top of the editor.
   */
  "editor.stickyScroll.enabled"?: boolean;
  /**
   * Defines the maximum number of sticky lines to show.
   */
  "editor.stickyScroll.maxLineCount"?: number;
  /**
   * Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.
   */
  "editor.stickyTabStops"?: boolean;
  /**
   * Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.
   */
  "editor.suggest.insertMode"?: "insert" | "replace";
  /**
   * Controls whether filtering and sorting suggestions accounts for small typos.
   */
  "editor.suggest.filterGraceful"?: boolean;
  /**
   * Controls whether sorting favors words that appear close to the cursor.
   */
  "editor.suggest.localityBonus"?: boolean;
  "editor.suggest.shareSuggestSelections"?: boolean;
  "editor.suggest.selectionMode"?: "always" | "never" | "whenTriggerCharacter" | "whenQuickSuggestion";
  /**
   * Controls whether an active snippet prevents quick suggestions.
   */
  "editor.suggest.snippetsPreventQuickSuggestions"?: boolean;
  /**
   * Controls whether to show or hide icons in suggestions.
   */
  "editor.suggest.showIcons"?: boolean;
  /**
   * Controls the visibility of the status bar at the bottom of the suggest widget.
   */
  "editor.suggest.showStatusBar"?: boolean;
  /**
   * Controls whether to preview the suggestion outcome in the editor.
   */
  "editor.suggest.preview"?: boolean;
  /**
   * Controls whether suggest details show inline with the label or only in the details widget.
   */
  "editor.suggest.showInlineDetails"?: boolean;
  "editor.suggest.maxVisibleSuggestions"?: number;
  "editor.suggest.filteredTypes"?: {
    [k: string]: unknown;
  };
  "editor.suggest.showMethods"?: boolean;
  "editor.suggest.showFunctions"?: boolean;
  "editor.suggest.showConstructors"?: boolean;
  "editor.suggest.showDeprecated"?: boolean;
  "editor.suggest.matchOnWordStartOnly"?: boolean;
  "editor.suggest.showFields"?: boolean;
  "editor.suggest.showVariables"?: boolean;
  "editor.suggest.showClasses"?: boolean;
  "editor.suggest.showStructs"?: boolean;
  "editor.suggest.showInterfaces"?: boolean;
  "editor.suggest.showModules"?: boolean;
  "editor.suggest.showProperties"?: boolean;
  "editor.suggest.showEvents"?: boolean;
  "editor.suggest.showOperators"?: boolean;
  "editor.suggest.showUnits"?: boolean;
  "editor.suggest.showValues"?: boolean;
  "editor.suggest.showConstants"?: boolean;
  "editor.suggest.showEnums"?: boolean;
  "editor.suggest.showEnumMembers"?: boolean;
  "editor.suggest.showKeywords"?: boolean;
  "editor.suggest.showWords"?: boolean;
  "editor.suggest.showColors"?: boolean;
  "editor.suggest.showFiles"?: boolean;
  "editor.suggest.showReferences"?: boolean;
  "editor.suggest.showCustomcolors"?: boolean;
  "editor.suggest.showFolders"?: boolean;
  "editor.suggest.showTypeParameters"?: boolean;
  "editor.suggest.showSnippets"?: boolean;
  "editor.suggest.showUsers"?: boolean;
  "editor.suggest.showIssues"?: boolean;
  "editor.suggestFontSize"?: number;
  "editor.suggestLineHeight"?: number;
  /**
   * Controls whether suggestions should automatically show up when typing trigger characters.
   */
  "editor.suggestOnTriggerCharacters"?: boolean;
  /**
   * Controls how suggestions are pre-selected when showing the suggest list.
   */
  "editor.suggestSelection"?: "first" | "recentlyUsed" | "recentlyUsedByPrefix";
  /**
   * Enables tab completions.
   */
  "editor.tabCompletion"?: "on" | "off" | "onlySnippets";
  /**
   * Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.
   */
  "editor.unicodeHighlight.nonBasicASCII"?: true | false | "inUntrustedWorkspace";
  /**
   * Controls whether characters that just reserve space or have no width at all are highlighted.
   */
  "editor.unicodeHighlight.invisibleCharacters"?: boolean;
  /**
   * Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.
   */
  "editor.unicodeHighlight.ambiguousCharacters"?: boolean;
  /**
   * Controls whether characters in comments should also be subject to Unicode highlighting.
   */
  "editor.unicodeHighlight.includeComments"?: true | false | "inUntrustedWorkspace";
  /**
   * Controls whether characters in strings should also be subject to Unicode highlighting.
   */
  "editor.unicodeHighlight.includeStrings"?: true | false | "inUntrustedWorkspace";
  /**
   * Defines allowed characters that are not being highlighted.
   */
  "editor.unicodeHighlight.allowedCharacters"?: {
    [k: string]: boolean;
  };
  /**
   * Unicode characters that are common in allowed locales are not being highlighted.
   */
  "editor.unicodeHighlight.allowedLocales"?: {
    [k: string]: boolean;
  };
  /**
   * Remove unusual line terminators that might cause problems.
   */
  "editor.unusualLineTerminators"?: "auto" | "off" | "prompt";
  /**
   * Inserting and deleting whitespace follows tab stops.
   */
  "editor.useTabStops"?: boolean;
  /**
   * Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.
   */
  "editor.wordBreak"?: "normal" | "keepAll";
  /**
   * Characters that will be used as word separators when doing word related navigations or operations.
   */
  "editor.wordSeparators"?: string;
  /**
   * Controls how lines should wrap.
   */
  "editor.wordWrap"?: "off" | "on" | "wordWrapColumn" | "bounded";
  "editor.wordWrapColumn"?: number;
  /**
   * Controls the indentation of wrapped lines.
   */
  "editor.wrappingIndent"?: "none" | "same" | "indent" | "deepIndent";
  /**
   * Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.
   */
  "editor.wrappingStrategy"?: "simple" | "advanced";
  /**
   * Controls strikethrough deprecated variables.
   */
  "editor.showDeprecated"?: boolean;
  /**
   * Enables the inlay hints in the editor.
   */
  "editor.inlayHints.enabled"?: "on" | "onUnlessPressed" | "offUnlessPressed" | "off";
  "editor.inlayHints.fontSize"?: number;
  "editor.inlayHints.fontFamily"?: string;
  /**
   * Enables the padding around the inlay hints in the editor.
   */
  "editor.inlayHints.padding"?: boolean;
  "editor.tabFocusMode"?: boolean;
  /**
   * Enable/disable running edits from extensions on paste.
   */
  "editor.experimental.pasteActions.enabled"?: boolean;
  /**
   * Enable/disable showing group headers in the Code Action menu.
   */
  "editor.codeActionWidget.showHeaders"?: boolean;
  /**
   * Enable/disable the ability to preview changes before renaming
   */
  "editor.rename.enablePreview"?: boolean;
  /**
   * Controls how symbols are sorted in the breadcrumbs outline view.
   */
  "breadcrumbs.symbolSortOrder"?: "position" | "name" | "type";
  "breadcrumbs.showFiles"?: boolean;
  "breadcrumbs.showModules"?: boolean;
  "breadcrumbs.showNamespaces"?: boolean;
  "breadcrumbs.showPackages"?: boolean;
  "breadcrumbs.showClasses"?: boolean;
  "breadcrumbs.showMethods"?: boolean;
  "breadcrumbs.showProperties"?: boolean;
  "breadcrumbs.showFields"?: boolean;
  "breadcrumbs.showConstructors"?: boolean;
  "breadcrumbs.showEnums"?: boolean;
  "breadcrumbs.showInterfaces"?: boolean;
  "breadcrumbs.showFunctions"?: boolean;
  "breadcrumbs.showVariables"?: boolean;
  "breadcrumbs.showConstants"?: boolean;
  "breadcrumbs.showStrings"?: boolean;
  "breadcrumbs.showNumbers"?: boolean;
  "breadcrumbs.showBooleans"?: boolean;
  "breadcrumbs.showArrays"?: boolean;
  "breadcrumbs.showObjects"?: boolean;
  "breadcrumbs.showKeys"?: boolean;
  "breadcrumbs.showNull"?: boolean;
  "breadcrumbs.showEnumMembers"?: boolean;
  "breadcrumbs.showStructs"?: boolean;
  "breadcrumbs.showEvents"?: boolean;
  "breadcrumbs.showOperators"?: boolean;
  "breadcrumbs.showTypeParameters"?: boolean;
  /**
   * Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.
   */
  "workbench.editor.languageDetection"?: boolean;
  "workbench.editor.restoreViewState"?: boolean;
  /**
   * Code Action kinds to be run on save.
   */
  "editor.codeActionsOnSave"?:
    | {
        /**
         * Controls whether auto fix action should be run on file save.
         */
        "source.fixAll"?: boolean;
        [k: string]: boolean;
      }
    | string[];
  /**
   * Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.
   */
  "editor.defaultFoldingRangeProvider"?:
    | null
    | "vscode.css-language-features"
    | "vscode.html-language-features"
    | "vscode.json-language-features"
    | "vscode.markdown-language-features"
    | "vscode.php-language-features"
    | "vscode.references-view"
    | "vscode.search-result"
    | "vscode.typescript-language-features"
    | "vscode.configuration-editing"
    | "vscode.debug-auto-launch"
    | "vscode.debug-server-ready"
    | "vscode.emmet"
    | "vscode.extension-editing"
    | "vscode.git"
    | "vscode.git-base"
    | "vscode.github"
    | "vscode.github-authentication"
    | "vscode.grunt"
    | "vscode.gulp"
    | "vscode.ipynb"
    | "vscode.jake"
    | "ms-vscode.js-debug"
    | "ms-vscode.js-debug-companion"
    | "vscode.markdown-math"
    | "vscode.media-preview"
    | "vscode.merge-conflict"
    | "vscode.microsoft-authentication"
    | "vscode.npm"
    | "ms-vscode-remote.remote-wsl-recommender"
    | "wraith13.save-vscode-schemas"
    | "vscode.simple-browser"
    | "ms-vscode.vscode-js-profile-table";
  /**
   * Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.
   */
  "editor.defaultFormatter"?:
    | null
    | "vscode.css-language-features"
    | "vscode.html-language-features"
    | "vscode.json-language-features"
    | "vscode.markdown-language-features"
    | "vscode.php-language-features"
    | "vscode.references-view"
    | "vscode.search-result"
    | "vscode.typescript-language-features"
    | "vscode.configuration-editing"
    | "vscode.debug-auto-launch"
    | "vscode.debug-server-ready"
    | "vscode.emmet"
    | "vscode.extension-editing"
    | "vscode.git"
    | "vscode.git-base"
    | "vscode.github"
    | "vscode.github-authentication"
    | "vscode.grunt"
    | "vscode.gulp"
    | "vscode.ipynb"
    | "vscode.jake"
    | "ms-vscode.js-debug"
    | "ms-vscode.js-debug-companion"
    | "vscode.markdown-math"
    | "vscode.media-preview"
    | "vscode.merge-conflict"
    | "vscode.microsoft-authentication"
    | "vscode.npm"
    | "ms-vscode-remote.remote-wsl-recommender"
    | "wraith13.save-vscode-schemas"
    | "vscode.simple-browser"
    | "ms-vscode.vscode-js-profile-table";
  /**
   * Controls if surround-with-snippets or file template snippets show as Code Actions.
   */
  "editor.snippets.codeActions.enabled"?: boolean;
  /**
   * Controls what editors to save before starting a debug session.
   */
  "debug.saveBeforeStart"?: "allEditorsInActiveGroup" | "nonUntitledEditorsInActiveGroup" | "none";
  /**
   * The default character set encoding to use when reading and writing files. This setting can also be configured per language.
   */
  "files.encoding"?:
    | "utf8"
    | "utf8bom"
    | "utf16le"
    | "utf16be"
    | "windows1252"
    | "iso88591"
    | "iso88593"
    | "iso885915"
    | "macroman"
    | "cp437"
    | "windows1256"
    | "iso88596"
    | "windows1257"
    | "iso88594"
    | "iso885914"
    | "windows1250"
    | "iso88592"
    | "cp852"
    | "windows1251"
    | "cp866"
    | "iso88595"
    | "koi8r"
    | "koi8u"
    | "iso885913"
    | "windows1253"
    | "iso88597"
    | "windows1255"
    | "iso88598"
    | "iso885910"
    | "iso885916"
    | "windows1254"
    | "iso88599"
    | "windows1258"
    | "gbk"
    | "gb18030"
    | "cp950"
    | "big5hkscs"
    | "shiftjis"
    | "eucjp"
    | "euckr"
    | "windows874"
    | "iso885911"
    | "koi8ru"
    | "koi8t"
    | "gb2312"
    | "cp865"
    | "cp850";
  "files.autoGuessEncoding"?: boolean;
  /**
   * The default end of line character.
   */
  "files.eol"?: "\n" | "\r\n" | "auto";
  /**
   * When enabled, will trim trailing whitespace when saving a file.
   */
  "files.trimTrailingWhitespace"?: boolean;
  /**
   * When enabled, insert a final new line at the end of the file when saving it.
   */
  "files.insertFinalNewline"?: boolean;
  /**
   * When enabled, will trim all new lines after the final new line at the end of the file when saving it.
   */
  "files.trimFinalNewlines"?: boolean;
  /**
   * A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.
   */
  "files.saveConflictResolution"?: "askUser" | "overwriteFileOnDisk";
  /**
   * Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
   */
  "editor.formatOnSave"?: boolean;
  "editor.formatOnSaveMode"?: "file" | "modifications" | "modificationsIfAvailable";
  /**
   * Controls whether Outline items are collapsed or expanded.
   */
  "outline.collapseItems"?: "alwaysCollapse" | "alwaysExpand";
  "outline.showFiles"?: boolean;
  "outline.showModules"?: boolean;
  "outline.showNamespaces"?: boolean;
  "outline.showPackages"?: boolean;
  "outline.showClasses"?: boolean;
  "outline.showMethods"?: boolean;
  "outline.showProperties"?: boolean;
  "outline.showFields"?: boolean;
  "outline.showConstructors"?: boolean;
  "outline.showEnums"?: boolean;
  "outline.showInterfaces"?: boolean;
  "outline.showFunctions"?: boolean;
  "outline.showVariables"?: boolean;
  "outline.showConstants"?: boolean;
  "outline.showStrings"?: boolean;
  "outline.showNumbers"?: boolean;
  "outline.showBooleans"?: boolean;
  "outline.showArrays"?: boolean;
  "outline.showObjects"?: boolean;
  "outline.showKeys"?: boolean;
  "outline.showNull"?: boolean;
  "outline.showEnumMembers"?: boolean;
  "outline.showStructs"?: boolean;
  "outline.showEvents"?: boolean;
  "outline.showOperators"?: boolean;
  "outline.showTypeParameters"?: boolean;
  "emmet.showAbbreviationSuggestions"?: boolean;
  "emmet.triggerExpansionOnTab"?: boolean;
  /**
   * Enable/disable suggestion to complete JSDoc comments.
   */
  "javascript.suggest.completeJSDocs"?: boolean;
  /**
   * Enable/disable suggestion to complete JSDoc comments.
   */
  "typescript.suggest.completeJSDocs"?: boolean;
  "javascript.suggest.jsdoc.generateReturns"?: boolean;
  "typescript.suggest.jsdoc.generateReturns"?: boolean;
  "javascript.preferences.quoteStyle"?: "auto" | "single" | "double";
  "typescript.preferences.quoteStyle"?: "auto" | "single" | "double";
  /**
   * Preferred path style for auto imports.
   */
  "javascript.preferences.importModuleSpecifier"?: "shortest" | "relative" | "non-relative" | "project-relative";
  /**
   * Preferred path style for auto imports.
   */
  "typescript.preferences.importModuleSpecifier"?: "shortest" | "relative" | "non-relative" | "project-relative";
  /**
   * Preferred path ending for auto imports.
   */
  "javascript.preferences.importModuleSpecifierEnding"?: "auto" | "minimal" | "index" | "js";
  /**
   * Preferred path ending for auto imports.
   */
  "typescript.preferences.importModuleSpecifierEnding"?: "auto" | "minimal" | "index" | "js";
  /**
   * Preferred style for JSX attribute completions.
   */
  "javascript.preferences.jsxAttributeCompletionStyle"?: "auto" | "braces" | "none";
  /**
   * Preferred style for JSX attribute completions.
   */
  "typescript.preferences.jsxAttributeCompletionStyle"?: "auto" | "braces" | "none";
  /**
   * Enable/disable introducing aliases for object shorthand properties during renames.
   */
  "javascript.preferences.renameShorthandProperties"?: boolean;
  /**
   * Enable/disable introducing aliases for object shorthand properties during renames.
   */
  "typescript.preferences.renameShorthandProperties"?: boolean;
  /**
   * Enable/disable introducing aliases for object shorthand properties during renames.
   */
  "javascript.preferences.useAliasesForRenames"?: boolean;
  /**
   * Enable/disable introducing aliases for object shorthand properties during renames.
   */
  "typescript.preferences.useAliasesForRenames"?: boolean;
  /**
   * Enable/disable automatic closing of JSX tags.
   */
  "typescript.autoClosingTags"?: boolean;
  /**
   * Enable/disable automatic closing of JSX tags.
   */
  "javascript.autoClosingTags"?: boolean;
  /**
   * Enabled/disable autocomplete suggestions.
   */
  "javascript.suggest.enabled"?: boolean;
  /**
   * Enabled/disable autocomplete suggestions.
   */
  "typescript.suggest.enabled"?: boolean;
  [k: string]: unknown;
}
